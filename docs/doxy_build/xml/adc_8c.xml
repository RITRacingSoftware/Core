<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="adc_8c" kind="file" language="C++">
    <compoundname>adc.c</compoundname>
    <includes refid="adc_8h" local="yes">adc.h</includes>
    <includes local="yes">core_config.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stm32g4xx_hal.h</includes>
    <includes local="no">stm32g4xx_hal_adc.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="gpio_8h" local="yes">gpio.h</includes>
    <includes refid="clock_8h" local="yes">clock.h</includes>
    <includes refid="error__handler_8h" local="yes">error_handler.h</includes>
    <incdepgraph>
      <node id="2">
        <label>adc.h</label>
        <link refid="adc_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>clock.h</label>
        <link refid="clock_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>error_handler.h</label>
        <link refid="error__handler_8h_source"/>
      </node>
      <node id="10">
        <label>gpio.h</label>
        <link refid="gpio_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/driver/Src/adc.c</label>
        <link refid="adc_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>core_config.h</label>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="7">
        <label>stdio.h</label>
      </node>
      <node id="5">
        <label>stm32g4xx_hal.h</label>
      </node>
      <node id="8">
        <label>stm32g4xx_hal_adc.h</label>
      </node>
      <node id="9">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="adc_8c_1a3af22b46d4a4cf16b26273d6a9054179" prot="public" static="yes" mutable="no">
        <type>ADC_HandleTypeDef</type>
        <definition>ADC_HandleTypeDef adc1</definition>
        <argsstring></argsstring>
        <name>adc1</name>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/adc.c" line="44" column="26" bodyfile="src/driver/Src/adc.c" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="variable" id="adc_8c_1a3a5d52490a8c5b0cf0d9d08515719476" prot="public" static="yes" mutable="no">
        <type>ADC_HandleTypeDef</type>
        <definition>ADC_HandleTypeDef adc2</definition>
        <argsstring></argsstring>
        <name>adc2</name>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/adc.c" line="45" column="26" bodyfile="src/driver/Src/adc.c" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="variable" id="adc_8c_1a74627bb1eb14733d5d1c1dc7c609569d" prot="public" static="yes" mutable="no">
        <type>ADC_HandleTypeDef</type>
        <definition>ADC_HandleTypeDef adc3</definition>
        <argsstring></argsstring>
        <name>adc3</name>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/adc.c" line="46" column="26" bodyfile="src/driver/Src/adc.c" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="variable" id="adc_8c_1ab631171a6ab1305a6afa56b2fcf84516" prot="public" static="yes" mutable="no">
        <type>ADC_HandleTypeDef</type>
        <definition>ADC_HandleTypeDef adc4</definition>
        <argsstring></argsstring>
        <name>adc4</name>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/adc.c" line="47" column="26" bodyfile="src/driver/Src/adc.c" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="variable" id="adc_8c_1ac2a13d9a01f7398883e64dcfd685c3c8" prot="public" static="yes" mutable="no">
        <type>ADC_HandleTypeDef</type>
        <definition>ADC_HandleTypeDef adc5</definition>
        <argsstring></argsstring>
        <name>adc5</name>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/adc.c" line="48" column="26" bodyfile="src/driver/Src/adc.c" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="variable" id="adc_8c_1a6da2f195cdf25256078167f02868a5b2" prot="public" static="yes" mutable="no">
        <type><ref refid="structcore___a_d_c__def__s" kindref="compound">core_ADC_def_t</ref></type>
        <definition>core_ADC_def_t adc_defs[]</definition>
        <argsstring>[]</argsstring>
        <name>adc_defs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/adc.c" line="51" column="23" bodyfile="src/driver/Src/adc.c" bodystart="51" bodyend="94"/>
      </memberdef>
      <memberdef kind="variable" id="adc_8c_1aa3f924e56234c0d53db62abd5ce39560" prot="public" static="yes" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t core_ADC_initialized</definition>
        <argsstring></argsstring>
        <name>core_ADC_initialized</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/adc.c" line="96" column="17" bodyfile="src/driver/Src/adc.c" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="adc_8c_1acc7710217e13774ae2341e484213b722" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t core_ADC_channel_lookup[19]</definition>
        <argsstring>[19]</argsstring>
        <name>core_ADC_channel_lookup</name>
        <initializer>= {
    ADC_CHANNEL_0, ADC_CHANNEL_1, ADC_CHANNEL_2, ADC_CHANNEL_3,
    ADC_CHANNEL_4, ADC_CHANNEL_5, ADC_CHANNEL_6, ADC_CHANNEL_7,
    ADC_CHANNEL_8, ADC_CHANNEL_9, ADC_CHANNEL_10, ADC_CHANNEL_11,
    ADC_CHANNEL_12, ADC_CHANNEL_13, ADC_CHANNEL_14, ADC_CHANNEL_15,
    ADC_CHANNEL_16, ADC_CHANNEL_17, ADC_CHANNEL_18}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/adc.c" line="97" column="23" bodyfile="src/driver/Src/adc.c" bodystart="97" bodyend="102"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="adc_8c_1a621a15aeabffa62cc698e79224fb5985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_ADC_init</definition>
        <argsstring>(ADC_TypeDef *adc)</argsstring>
        <name>core_ADC_init</name>
        <param>
          <type>ADC_TypeDef *</type>
          <declname>adc</declname>
        </param>
        <briefdescription>
<para>Initialize an ADC module, including its clock. Also performs calibration. GPIO ports are not initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adc</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADC module to initialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if adc is not a valid ADC module or if the ADC fails to initialize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/adc.c" line="113" column="6" bodyfile="src/driver/Src/adc.c" bodystart="113" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="adc_8c_1ae013346221e7d8ad7c08230899a8b09a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_ADC_setup_pin</definition>
        <argsstring>(GPIO_TypeDef *port, uint32_t pin, uint8_t opamp)</argsstring>
        <name>core_ADC_setup_pin</name>
        <param>
          <type>GPIO_TypeDef *</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pin</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>opamp</declname>
        </param>
        <briefdescription>
<para>Set up a pin as an analog input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO port (GPIOx) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO pin (GPIO_PIN_x) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opamp</parametername>
</parameternamelist>
<parameterdescription>
<para>1 if the input should be routed through an opamp, 0 otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>if a configuration was found for the given pin </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/adc.c" line="171" column="6" bodyfile="src/driver/Src/adc.c" bodystart="171" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="adc_8c_1a3334b39ee94f9f9c300ac81b88848a2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_ADC_read_channel</definition>
        <argsstring>(GPIO_TypeDef *port, uint32_t pin, uint16_t *result)</argsstring>
        <name>core_ADC_read_channel</name>
        <param>
          <type>GPIO_TypeDef *</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pin</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Read the value of an analog input as a value between 0 and 4095. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO port of the pin to be read (GPIOx) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin number of the pin to be read (GPIO_PIN_x) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to which the result should be stored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if the given pin is not an analog input or if the corresponding ADC module is not initialized or if an error occurs while reading, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/adc.c" line="258" column="6" bodyfile="src/driver/Src/adc.c" bodystart="258" bodyend="300"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Core ADC library. </para>
    </briefdescription>
    <detaileddescription>
<para>This core library component is used to initialize ADCs and read from analog inputs.</para>
<sect1 id="adc_8c_1autotoc_md0_1s1"><sect2 id="adc_8c_1autotoc_md0">
<title>Initialization</title><para>Before initializing any pins, the user code must initialize one or more ADC modules.</para>
<para>To initialize a pin, the user code calls <ref refid="adc_8c_1ae013346221e7d8ad7c08230899a8b09a" kindref="member">core_ADC_setup_pin()</ref>. This function takes the port and pin number as well as a third argument specifying whether the analog signal should be routed through an internal op amp follower circuit. This will improve the accuracy of the measurement when the analog input is fed from a high-impedance source</para>
<para>If <ref refid="adc_8c_1ae013346221e7d8ad7c08230899a8b09a" kindref="member">core_ADC_setup_pin()</ref> returns 0, then the desired pin cannot be connected to any of the ADCs that are currently initialized. It may be necessary to initialize an additional ADC module or change the pin the analog input is connected to.</para>
</sect2></sect1>
<sect1 id="adc_8c_1autotoc_md1_1s1"><sect2 id="adc_8c_1autotoc_md1">
<title>Reading</title><para>To read from an analog input, the user code calls <ref refid="adc_8c_1a3334b39ee94f9f9c300ac81b88848a2e" kindref="member">core_ADC_read_channel()</ref>. The result is stored in a pointer passed as an argument, and the return value specifies whether the conversion was successful or not. </para>
</sect2></sect1>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;adc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;core_config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stm32g4xx_hal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stm32g4xx_hal_adc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gpio.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;clock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;error_handler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ADC_HandleTypeDef<sp/>adc1<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ADC_HandleTypeDef<sp/>adc2<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ADC_HandleTypeDef<sp/>adc3<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ADC_HandleTypeDef<sp/>adc4<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ADC_HandleTypeDef<sp/>adc5<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structcore___a_d_c__def__s" kindref="compound">core_ADC_def_t</ref><sp/>adc_defs[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{GPIOA,<sp/>GPIO_PIN_0,<sp/>CORE_ADC_ALLOWED_ADC1<sp/>|<sp/>CORE_ADC_ALLOWED_ADC2,<sp/>{1,<sp/>1,<sp/>0,<sp/>0,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{GPIOA,<sp/>GPIO_PIN_1,<sp/>CORE_ADC_ALLOWED_ADC1<sp/>|<sp/>CORE_ADC_ALLOWED_ADC2<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP1<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP3,<sp/>{2,<sp/>2,<sp/>0,<sp/>0,<sp/>0},<sp/>32,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{GPIOA,<sp/>GPIO_PIN_2,<sp/>CORE_ADC_ALLOWED_ADC1,<sp/>{3,<sp/>0,<sp/>0,<sp/>0,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{GPIOA,<sp/>GPIO_PIN_3,<sp/>CORE_ADC_ALLOWED_ADC1<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP1,<sp/>{4,<sp/>0,<sp/>0,<sp/>0,<sp/>0},<sp/>1,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{GPIOA,<sp/>GPIO_PIN_4,<sp/>CORE_ADC_ALLOWED_ADC2,<sp/>{0,<sp/>17,<sp/>0,<sp/>0,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{GPIOA,<sp/>GPIO_PIN_5,<sp/>CORE_ADC_ALLOWED_ADC2,<sp/>{0,<sp/>13,<sp/>0,<sp/>0,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{GPIOA,<sp/>GPIO_PIN_6,<sp/>CORE_ADC_ALLOWED_ADC2,<sp/>{0,<sp/>3,<sp/>0,<sp/>0,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{GPIOA,<sp/>GPIO_PIN_7,<sp/>CORE_ADC_ALLOWED_ADC2<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP1<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP2,<sp/>{0,<sp/>4,<sp/>0,<sp/>0,<sp/>0},<sp/>2,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{GPIOA,<sp/>GPIO_PIN_8,<sp/>CORE_ADC_ALLOWED_ADC5,<sp/>{0,<sp/>0,<sp/>0,<sp/>0,<sp/>1},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{GPIOA,<sp/>GPIO_PIN_9,<sp/>CORE_ADC_ALLOWED_ADC5,<sp/>{0,<sp/>0,<sp/>0,<sp/>0,<sp/>2},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{GPIOB,<sp/>GPIO_PIN_0,<sp/>CORE_ADC_ALLOWED_ADC1<sp/>|<sp/>CORE_ADC_ALLOWED_ADC3<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP2<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP3,<sp/>{15,<sp/>0,<sp/>12,<sp/>0,<sp/>0},<sp/>8,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{GPIOB,<sp/>GPIO_PIN_1,<sp/>CORE_ADC_ALLOWED_ADC1<sp/>|<sp/>CORE_ADC_ALLOWED_ADC3,<sp/>{12,<sp/>0,<sp/>1,<sp/>0,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{GPIOB,<sp/>GPIO_PIN_2,<sp/>CORE_ADC_ALLOWED_ADC2,<sp/>{0,<sp/>12,<sp/>0,<sp/>0,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{GPIOB,<sp/>GPIO_PIN_11,<sp/>CORE_ADC_ALLOWED_ADC1<sp/>|<sp/>CORE_ADC_ALLOWED_ADC2<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP4,<sp/>{14,<sp/>14,<sp/>0,<sp/>0,<sp/>0},<sp/>128,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{GPIOB,<sp/>GPIO_PIN_12,<sp/>CORE_ADC_ALLOWED_ADC1<sp/>|<sp/>CORE_ADC_ALLOWED_ADC4<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP6,<sp/>{11,<sp/>0,<sp/>0,<sp/>3,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{GPIOB,<sp/>GPIO_PIN_13,<sp/>CORE_ADC_ALLOWED_ADC3<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP3<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP4<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP6,<sp/>{0,<sp/>0,<sp/>5,<sp/>0,<sp/>0},<sp/>2064,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{GPIOB,<sp/>GPIO_PIN_14,<sp/>CORE_ADC_ALLOWED_ADC1<sp/>|<sp/>CORE_ADC_ALLOWED_ADC4<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP2<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP5,<sp/>{5,<sp/>0,<sp/>0,<sp/>4,<sp/>0},<sp/>4,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{GPIOB,<sp/>GPIO_PIN_15,<sp/>CORE_ADC_ALLOWED_ADC2<sp/>|<sp/>CORE_ADC_ALLOWED_ADC4,<sp/>{0,<sp/>15,<sp/>0,<sp/>5,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{GPIOC,<sp/>GPIO_PIN_0,<sp/>CORE_ADC_ALLOWED_ADC1<sp/>|<sp/>CORE_ADC_ALLOWED_ADC2,<sp/>{6,<sp/>6,<sp/>0,<sp/>0,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{GPIOC,<sp/>GPIO_PIN_1,<sp/>CORE_ADC_ALLOWED_ADC1<sp/>|<sp/>CORE_ADC_ALLOWED_ADC2,<sp/>{7,<sp/>7,<sp/>0,<sp/>0,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{GPIOC,<sp/>GPIO_PIN_2,<sp/>CORE_ADC_ALLOWED_ADC1<sp/>|<sp/>CORE_ADC_ALLOWED_ADC2,<sp/>{8,<sp/>8,<sp/>0,<sp/>0,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{GPIOC,<sp/>GPIO_PIN_3,<sp/>CORE_ADC_ALLOWED_ADC1<sp/>|<sp/>CORE_ADC_ALLOWED_ADC2<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP5,<sp/>{9,<sp/>9,<sp/>0,<sp/>0,<sp/>0},<sp/>512,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{GPIOC,<sp/>GPIO_PIN_4,<sp/>CORE_ADC_ALLOWED_ADC2,<sp/>{0,<sp/>5,<sp/>0,<sp/>0,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{GPIOC,<sp/>GPIO_PIN_5,<sp/>CORE_ADC_ALLOWED_ADC2,<sp/>{0,<sp/>11,<sp/>0,<sp/>0,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{GPIOD,<sp/>GPIO_PIN_10,<sp/>CORE_ADC_ALLOWED_ADC3<sp/>|<sp/>CORE_ADC_ALLOWED_ADC4<sp/>|<sp/>CORE_ADC_ALLOWED_ADC5,<sp/>{0,<sp/>0,<sp/>7,<sp/>7,<sp/>7},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{GPIOD,<sp/>GPIO_PIN_11,<sp/>CORE_ADC_ALLOWED_ADC3<sp/>|<sp/>CORE_ADC_ALLOWED_ADC4<sp/>|<sp/>CORE_ADC_ALLOWED_ADC5<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP4,<sp/>{0,<sp/>0,<sp/>8,<sp/>8,<sp/>8},<sp/>64,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{GPIOD,<sp/>GPIO_PIN_12,<sp/>CORE_ADC_ALLOWED_ADC3<sp/>|<sp/>CORE_ADC_ALLOWED_ADC4<sp/>|<sp/>CORE_ADC_ALLOWED_ADC5<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP5,<sp/>{0,<sp/>0,<sp/>9,<sp/>9,<sp/>9},<sp/>256,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{GPIOD,<sp/>GPIO_PIN_13,<sp/>CORE_ADC_ALLOWED_ADC3<sp/>|<sp/>CORE_ADC_ALLOWED_ADC4<sp/>|<sp/>CORE_ADC_ALLOWED_ADC5,<sp/>{0,<sp/>0,<sp/>10,<sp/>10,<sp/>10},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{GPIOD,<sp/>GPIO_PIN_14,<sp/>CORE_ADC_ALLOWED_ADC3<sp/>|<sp/>CORE_ADC_ALLOWED_ADC4<sp/>|<sp/>CORE_ADC_ALLOWED_ADC5<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP2,<sp/>{0,<sp/>0,<sp/>11,<sp/>11,<sp/>11},<sp/>12,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{GPIOD,<sp/>GPIO_PIN_8,<sp/>CORE_ADC_ALLOWED_ADC4<sp/>|<sp/>CORE_ADC_ALLOWED_ADC5,<sp/>{0,<sp/>0,<sp/>0,<sp/>12,<sp/>12},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{GPIOD,<sp/>GPIO_PIN_9,<sp/>CORE_ADC_ALLOWED_ADC4<sp/>|<sp/>CORE_ADC_ALLOWED_ADC5<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP6,<sp/>{0,<sp/>0,<sp/>0,<sp/>13,<sp/>13},<sp/>1024,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{GPIOE,<sp/>GPIO_PIN_7,<sp/>CORE_ADC_ALLOWED_ADC3,<sp/>{0,<sp/>0,<sp/>4,<sp/>0,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{GPIOE,<sp/>GPIO_PIN_8,<sp/>CORE_ADC_ALLOWED_ADC3<sp/>|<sp/>CORE_ADC_ALLOWED_ADC4<sp/>|<sp/>CORE_ADC_ALLOWED_ADC5,<sp/>{0,<sp/>0,<sp/>6,<sp/>6,<sp/>6},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{GPIOE,<sp/>GPIO_PIN_9,<sp/>CORE_ADC_ALLOWED_ADC3,<sp/>{0,<sp/>0,<sp/>2,<sp/>0,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{GPIOE,<sp/>GPIO_PIN_10,<sp/>CORE_ADC_ALLOWED_ADC3<sp/>|<sp/>CORE_ADC_ALLOWED_ADC4<sp/>|<sp/>CORE_ADC_ALLOWED_ADC5,<sp/>{0,<sp/>0,<sp/>14,<sp/>14,<sp/>14},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{GPIOE,<sp/>GPIO_PIN_11,<sp/>CORE_ADC_ALLOWED_ADC3<sp/>|<sp/>CORE_ADC_ALLOWED_ADC4<sp/>|<sp/>CORE_ADC_ALLOWED_ADC5,<sp/>{0,<sp/>0,<sp/>15,<sp/>15,<sp/>15},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{GPIOE,<sp/>GPIO_PIN_12,<sp/>CORE_ADC_ALLOWED_ADC3<sp/>|<sp/>CORE_ADC_ALLOWED_ADC4<sp/>|<sp/>CORE_ADC_ALLOWED_ADC5,<sp/>{0,<sp/>0,<sp/>16,<sp/>16,<sp/>16},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{GPIOE,<sp/>GPIO_PIN_13,<sp/>CORE_ADC_ALLOWED_ADC3,<sp/>{0,<sp/>0,<sp/>3,<sp/>0,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{GPIOE,<sp/>GPIO_PIN_14,<sp/>CORE_ADC_ALLOWED_ADC4,<sp/>{0,<sp/>0,<sp/>0,<sp/>1,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{GPIOE,<sp/>GPIO_PIN_15,<sp/>CORE_ADC_ALLOWED_ADC4,<sp/>{0,<sp/>0,<sp/>0,<sp/>2,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{GPIOF,<sp/>GPIO_PIN_0,<sp/>CORE_ADC_ALLOWED_ADC1,<sp/>{10,<sp/>0,<sp/>0,<sp/>0,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{GPIOF,<sp/>GPIO_PIN_1,<sp/>CORE_ADC_ALLOWED_ADC2,<sp/>{0,<sp/>10,<sp/>0,<sp/>0,<sp/>0},<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="94"><highlight class="normal">};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t<sp/>core_ADC_initialized<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>core_ADC_channel_lookup[19]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>ADC_CHANNEL_0,<sp/>ADC_CHANNEL_1,<sp/>ADC_CHANNEL_2,<sp/>ADC_CHANNEL_3,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>ADC_CHANNEL_4,<sp/>ADC_CHANNEL_5,<sp/>ADC_CHANNEL_6,<sp/>ADC_CHANNEL_7,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>ADC_CHANNEL_8,<sp/>ADC_CHANNEL_9,<sp/>ADC_CHANNEL_10,<sp/>ADC_CHANNEL_11,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>ADC_CHANNEL_12,<sp/>ADC_CHANNEL_13,<sp/>ADC_CHANNEL_14,<sp/>ADC_CHANNEL_15,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>ADC_CHANNEL_16,<sp/>ADC_CHANNEL_17,<sp/>ADC_CHANNEL_18};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="adc_8c_1a621a15aeabffa62cc698e79224fb5985" kindref="member">core_ADC_init</ref>(ADC_TypeDef<sp/>*adc)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>clock<sp/>for<sp/>opamps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>__HAL_RCC_SYSCFG_CLK_ENABLE();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>ADC_HandleTypeDef<sp/>*hadc;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adc<sp/>==<sp/>ADC1)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hadc<sp/>=<sp/>&amp;adc1;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_clock_ADC12_init();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_ADC_initialized<sp/>|=<sp/>CORE_ADC_ALLOWED_ADC1<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP1;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adc<sp/>==<sp/>ADC2)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hadc<sp/>=<sp/>&amp;adc2;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_clock_ADC12_init();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_ADC_initialized<sp/>|=<sp/>CORE_ADC_ALLOWED_ADC2<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP2<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP3;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adc<sp/>==<sp/>ADC3)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hadc<sp/>=<sp/>&amp;adc3;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_clock_ADC345_init();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_ADC_initialized<sp/>|=<sp/>CORE_ADC_ALLOWED_ADC3<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP3;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adc<sp/>==<sp/>ADC4)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hadc<sp/>=<sp/>&amp;adc4;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_clock_ADC345_init();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_ADC_initialized<sp/>|=<sp/>CORE_ADC_ALLOWED_ADC4<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP6;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adc<sp/>==<sp/>ADC5)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hadc<sp/>=<sp/>&amp;adc5;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_clock_ADC345_init();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_ADC_initialized<sp/>|=<sp/>CORE_ADC_ALLOWED_ADC5<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP4<sp/>|<sp/>CORE_ADC_ALLOWED_OPAMP5;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>hadc-&gt;Instance<sp/>=<sp/>adc;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>hadc-&gt;Init.ClockPrescaler<sp/>=<sp/>ADC_CLOCK_SYNC_PCLK_DIV2;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>hadc-&gt;Init.Resolution<sp/>=<sp/>ADC_RESOLUTION_12B;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>hadc-&gt;Init.DataAlign<sp/>=<sp/>ADC_DATAALIGN_RIGHT;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>hadc-&gt;Init.GainCompensation<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>hadc-&gt;Init.ScanConvMode<sp/>=<sp/>ADC_SCAN_DISABLE;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>hadc-&gt;Init.EOCSelection<sp/>=<sp/>ADC_EOC_SINGLE_CONV;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>hadc-&gt;Init.LowPowerAutoWait<sp/>=<sp/>DISABLE;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>hadc-&gt;Init.ContinuousConvMode<sp/>=<sp/>DISABLE;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>hadc-&gt;Init.NbrOfConversion<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>hadc-&gt;Init.DiscontinuousConvMode<sp/>=<sp/>DISABLE;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>hadc-&gt;Init.ExternalTrigConv<sp/>=<sp/>ADC_SOFTWARE_START;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>hadc-&gt;Init.ExternalTrigConvEdge<sp/>=<sp/>ADC_EXTERNALTRIGCONVEDGE_NONE;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>hadc-&gt;Init.DMAContinuousRequests<sp/>=<sp/>DISABLE;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>hadc-&gt;Init.Overrun<sp/>=<sp/>ADC_OVR_DATA_PRESERVED;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>hadc-&gt;Init.OversamplingMode<sp/>=<sp/>DISABLE;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAL_ADC_Init(hadc)<sp/>!=<sp/>HAL_OK)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAL_ADCEx_Calibration_Start(hadc,<sp/>ADC_SINGLE_ENDED)<sp/>!=<sp/>HAL_OK)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="adc_8c_1ae013346221e7d8ad7c08230899a8b09a" kindref="member">core_ADC_setup_pin</ref>(GPIO_TypeDef<sp/>*port,<sp/>uint32_t<sp/>pin,<sp/>uint8_t<sp/>opamp)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcore___a_d_c__def__s" kindref="compound">core_ADC_def_t</ref><sp/>*adc_def_ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>42;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((adc_defs[i].port<sp/>==<sp/>port)<sp/>&amp;&amp;<sp/>(adc_defs[i].pin<sp/>==<sp/>pin))<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr<sp/>=<sp/>adc_defs<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!adc_def_ptr)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>mask<sp/>=<sp/>adc_def_ptr-&gt;allowed_connections<sp/>&amp;<sp/>core_ADC_initialized;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opamp)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>for<sp/>opamps<sp/>that<sp/>can<sp/>be<sp/>connected<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/>CORE_ADC_ALLOWED_OPAMP1)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc<sp/>=<sp/>ADC1;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc_chan_sel<sp/>=<sp/>13;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;opamp<sp/>=<sp/>OPAMP1;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;opamp_chan_sel<sp/>=<sp/>(adc_def_ptr-&gt;opamp_chan<sp/>&amp;<sp/>3);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/>CORE_ADC_ALLOWED_OPAMP2)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc<sp/>=<sp/>ADC2;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc_chan_sel<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;opamp<sp/>=<sp/>OPAMP2;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;opamp_chan_sel<sp/>=<sp/>((adc_def_ptr-&gt;opamp_chan&gt;&gt;2)<sp/>&amp;<sp/>3);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/>CORE_ADC_ALLOWED_OPAMP3)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(core_ADC_initialized<sp/>&amp;<sp/>CORE_ADC_ALLOWED_ADC2)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc<sp/>=<sp/>ADC2;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc_chan_sel<sp/>=<sp/>18;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc<sp/>=<sp/>ADC3;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc_chan_sel<sp/>=<sp/>13;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;opamp<sp/>=<sp/>OPAMP3;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;opamp_chan_sel<sp/>=<sp/>((adc_def_ptr-&gt;opamp_chan&gt;&gt;4)<sp/>&amp;<sp/>3);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/>CORE_ADC_ALLOWED_OPAMP4)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc<sp/>=<sp/>ADC5;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc_chan_sel<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;opamp<sp/>=<sp/>OPAMP4;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;opamp_chan_sel<sp/>=<sp/>((adc_def_ptr-&gt;opamp_chan&gt;&gt;6)<sp/>&amp;<sp/>3);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/>CORE_ADC_ALLOWED_OPAMP5)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc<sp/>=<sp/>ADC5;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc_chan_sel<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;opamp<sp/>=<sp/>OPAMP5;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;opamp_chan_sel<sp/>=<sp/>((adc_def_ptr-&gt;opamp_chan&gt;&gt;8)<sp/>&amp;<sp/>3);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/>CORE_ADC_ALLOWED_OPAMP6)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc<sp/>=<sp/>ADC4;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc_chan_sel<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;opamp<sp/>=<sp/>OPAMP6;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;opamp_chan_sel<sp/>=<sp/>((adc_def_ptr-&gt;opamp_chan&gt;&gt;10)<sp/>&amp;<sp/>3);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/>CORE_ADC_ALLOWED_ADC1)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc<sp/>=<sp/>ADC1;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc_chan_sel<sp/>=<sp/>adc_def_ptr-&gt;chan[0];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/>CORE_ADC_ALLOWED_ADC2)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc<sp/>=<sp/>ADC2;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc_chan_sel<sp/>=<sp/>adc_def_ptr-&gt;chan[1];</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/>CORE_ADC_ALLOWED_ADC3)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc<sp/>=<sp/>ADC3;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc_chan_sel<sp/>=<sp/>adc_def_ptr-&gt;chan[2];</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/>CORE_ADC_ALLOWED_ADC4)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc<sp/>=<sp/>ADC4;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc_chan_sel<sp/>=<sp/>adc_def_ptr-&gt;chan[3];</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/>CORE_ADC_ALLOWED_ADC5)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc<sp/>=<sp/>ADC5;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;adc_chan_sel<sp/>=<sp/>adc_def_ptr-&gt;chan[4];</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_InitTypeDef<sp/>GPIO_InitStructure;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_InitStructure.Pin<sp/>=<sp/>pin;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_InitStructure.Mode<sp/>=<sp/>GPIO_MODE_ANALOG;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_InitStructure.Pull<sp/>=<sp/>GPIO_NOPULL;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_InitStructure.Speed<sp/>=<sp/>GPIO_SPEED_FREQ_LOW;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_GPIO_Init(port,<sp/>&amp;GPIO_InitStructure);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="adc_8c_1a3334b39ee94f9f9c300ac81b88848a2e" kindref="member">core_ADC_read_channel</ref>(GPIO_TypeDef<sp/>*port,<sp/>uint32_t<sp/>pin,<sp/>uint16_t<sp/>*result)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcore___a_d_c__def__s" kindref="compound">core_ADC_def_t</ref><sp/>*adc_def_ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>42;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((adc_defs[i].port<sp/>==<sp/>port)<sp/>&amp;&amp;<sp/>(adc_defs[i].pin<sp/>==<sp/>pin))<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr<sp/>=<sp/>adc_defs<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>ADC_HandleTypeDef<sp/>*hadc;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>chan;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!adc_def_ptr)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adc_def_ptr-&gt;adc<sp/>==<sp/>ADC1)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hadc<sp/>=<sp/>&amp;adc1;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adc_def_ptr-&gt;adc<sp/>==<sp/>ADC2)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hadc<sp/>=<sp/>&amp;adc2;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adc_def_ptr-&gt;adc<sp/>==<sp/>ADC3)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hadc<sp/>=<sp/>&amp;adc3;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adc_def_ptr-&gt;adc<sp/>==<sp/>ADC4)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hadc<sp/>=<sp/>&amp;adc4;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adc_def_ptr-&gt;adc<sp/>==<sp/>ADC5)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hadc<sp/>=<sp/>&amp;adc5;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adc_def_ptr-&gt;opamp)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adc_def_ptr-&gt;opamp-&gt;CSR<sp/>=<sp/>OPAMP_CSR_VMSEL_0<sp/>|<sp/>OPAMP_CSR_VMSEL_1<sp/>|<sp/>1<sp/>|<sp/>OPAMP_CSR_OPAMPINTEN<sp/>|<sp/>((adc_def_ptr-&gt;opamp_chan_sel&lt;&lt;2)<sp/>&amp;<sp/>0xc);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>ADC_ChannelConfTypeDef<sp/>sConfig;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>sConfig.Channel<sp/>=<sp/>core_ADC_channel_lookup[adc_def_ptr-&gt;adc_chan_sel];</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>sConfig.Rank<sp/>=<sp/>ADC_REGULAR_RANK_1;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>sConfig.SamplingTime<sp/>=<sp/>ADC_SAMPLETIME_640CYCLES_5;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>sConfig.SingleDiff<sp/>=<sp/>ADC_SINGLE_ENDED;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>sConfig.OffsetNumber<sp/>=<sp/>ADC_OFFSET_NONE;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>sConfig.Offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAL_ADC_ConfigChannel(hadc,<sp/>&amp;sConfig)<sp/>!=<sp/>HAL_OK)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_ADC_Start(hadc);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_ADC_PollForConversion(hadc,<sp/>HAL_MAX_DELAY);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>*result<sp/>=<sp/>HAL_ADC_GetValue(hadc);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_ADC_Stop(hadc);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/driver/Src/adc.c"/>
  </compounddef>
</doxygen>
