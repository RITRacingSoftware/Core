<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="can_8c" kind="file" language="C++">
    <compoundname>can.c</compoundname>
    <includes refid="can_8h" local="yes">can.h</includes>
    <includes local="yes">core_config.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stm32g4xx_hal.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes local="yes">FreeRTOS.h</includes>
    <includes local="yes">queue.h</includes>
    <includes local="yes">semphr.h</includes>
    <includes refid="gpio_8h" local="yes">gpio.h</includes>
    <includes refid="clock_8h" local="yes">clock.h</includes>
    <includes refid="timeout_8h" local="yes">timeout.h</includes>
    <includes refid="error__handler_8h" local="yes">error_handler.h</includes>
    <includes refid="boot_8h" local="yes">boot.h</includes>
    <incdepgraph>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="8">
        <label>queue.h</label>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>clock.h</label>
        <link refid="clock_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>gpio.h</label>
        <link refid="gpio_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string.h</label>
      </node>
      <node id="9">
        <label>semphr.h</label>
      </node>
      <node id="16">
        <label>error_handler.h</label>
        <link refid="error__handler_8h_source"/>
      </node>
      <node id="10">
        <label>core_config.h</label>
      </node>
      <node id="13">
        <label>math.h</label>
      </node>
      <node id="15">
        <label>timeout.h</label>
        <link refid="timeout_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>boot.h</label>
        <link refid="boot_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>stdio.h</label>
      </node>
      <node id="7">
        <label>FreeRTOS.h</label>
      </node>
      <node id="2">
        <label>can.h</label>
        <link refid="can_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stm32g4xx_hal.h</label>
      </node>
      <node id="1">
        <label>/home/matthias/racing/core/src/driver/Src/can.c</label>
        <link refid="can_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="can_8c_1aacd5490e484a5214f955baa09c7168c9" prot="public" static="yes" mutable="no">
        <type><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref></type>
        <definition>core_CAN_module_t can1</definition>
        <argsstring></argsstring>
        <name>can1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="71" column="26" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="can_8c_1a7aa4c412a7baabfc19892fd7bf9172a7" prot="public" static="yes" mutable="no">
        <type><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref></type>
        <definition>core_CAN_module_t can2</definition>
        <argsstring></argsstring>
        <name>can2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="72" column="26" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="can_8c_1ae4a35ed0763435aa5a03dd086f42a897" prot="public" static="yes" mutable="no">
        <type><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref></type>
        <definition>core_CAN_module_t can3</definition>
        <argsstring></argsstring>
        <name>can3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="73" column="26" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="can_8c_1aa7200028243560e4cf59759da4d2e07d" prot="public" static="no" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t core_CAN_dlc_lookup[16]</definition>
        <argsstring>[16]</argsstring>
        <name>core_CAN_dlc_lookup</name>
        <initializer>= {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="75" column="15" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="can_8c_1a6684b2c0035a1e4f6bb3fec2c7515082" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void rx_handler</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can)</argsstring>
        <name>rx_handler</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="397" column="13" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="397" bodyend="440" declfile="/home/matthias/racing/core/src/driver/Src/can.c" declline="77" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a8448367bb43caa72677ab02c3feae243" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void add_CAN_message_to_rx_queue</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can, uint32_t id, uint8_t dlc, uint8_t *data)</argsstring>
        <name>add_CAN_message_to_rx_queue</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dlc</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="456" column="13" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="456" bodyend="469" declfile="/home/matthias/racing/core/src/driver/Src/can.c" declline="78" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="can_8c_1af9edf2f9c4b105fb15fd2c965a1a8458" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void add_CAN_extended_message_to_rx_queue</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can, uint32_t id, uint8_t dlc, uint8_t *data, bool use_fd)</argsstring>
        <name>add_CAN_extended_message_to_rx_queue</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dlc</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="442" column="13" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="442" bodyend="454" declfile="/home/matthias/racing/core/src/driver/Src/can.c" declline="79" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a2ec73eef031af8e4e6c07cde77872b68" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool CAN_clock_set_params</definition>
        <argsstring>(FDCAN_HandleTypeDef *hfdcan)</argsstring>
        <name>CAN_clock_set_params</name>
        <param>
          <type>FDCAN_HandleTypeDef *</type>
          <declname>hfdcan</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="554" column="13" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="554" bodyend="578" declfile="/home/matthias/racing/core/src/driver/Src/can.c" declline="80" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="can_8c_1ac0dc69c0e35e805834c1dc66fd8fb381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref> *</type>
        <definition>core_CAN_module_t* core_CAN_convert</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can)</argsstring>
        <name>core_CAN_convert</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="82" column="19" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="82" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="can_8c_1af5a65d61181a7d9e50f8f42df8a73cf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_CAN_init</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can)</argsstring>
        <name>core_CAN_init</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <briefdescription>
<para>Initialize an FDCAN module, the RX and TX queues, and the RX and TX pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if the given FDCAN is not valid or the initialization failed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="95" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="95" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="can_8c_1ae0e18230790182107643e8c44d59646f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_CAN_add_message_to_tx_queue</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can, uint32_t id, uint8_t dlc, uint64_t data)</argsstring>
        <name>core_CAN_add_message_to_tx_queue</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dlc</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Add a CAN frame to the TX queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>can</parametername>
</parameternamelist>
<parameterdescription>
<para>FDCAN module for which the frame is being enqueued </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the CAN frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlc</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of data bytes in the CAN frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data bytes, encoded LSB-first as a uint64 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if the queue is full </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="256" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="256" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a78c43d4e3c5280d09a1bca37f9ba986f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_CAN_add_extended_message_to_tx_queue</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can, uint32_t id, uint8_t dlc, uint8_t *data)</argsstring>
        <name>core_CAN_add_extended_message_to_tx_queue</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dlc</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Add a CAN frame to the TX queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>can</parametername>
</parameternamelist>
<parameterdescription>
<para>FDCAN module for which the frame is being enqueued </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the CAN frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlc</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of data bytes in the CAN frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of data bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if the queue is full, if the FDCAN is not configured for FD operation, or if <computeroutput>dlc</computeroutput> &gt; 64 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="282" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="282" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a5956fa458e011f58d514fcfa3f45b72a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_CAN_send_from_tx_queue_task</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can)</argsstring>
        <name>core_CAN_send_from_tx_queue_task</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <briefdescription>
<para>Loop for sending data in the TX queue over CAN. This function must be run in its own task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>can</parametername>
</parameternamelist>
<parameterdescription>
<para>FDCAN module </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="301" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="301" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a84ba21a70b0eaa5a94ebfa9d80ce0834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_CAN_send_message</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can, uint32_t id, uint8_t dlc, uint64_t data)</argsstring>
        <name>core_CAN_send_message</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dlc</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Add a CAN message to the hardware FIFO. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>can</parametername>
</parameternamelist>
<parameterdescription>
<para>FDCAN module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the message to be transmitted. If this value is greater than 2047, then an extended ID is automatically selected. Only the lowest 29 bits are kept, so setting the MSB will force an extended ID even if the ID is less than or equal to 2047 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlc</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the packet (0-8) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data encoded as a uint64_t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if an error occurred while adding the message to the queue </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="341" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="341" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="can_8c_1aec814b501cd9c108a515bcbb0e3bf4a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_CAN_send_fd_message</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can, uint32_t id, uint8_t dlc, uint8_t *data)</argsstring>
        <name>core_CAN_send_fd_message</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dlc</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Add an FDCAN message to the hardware FIFO. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>can</parametername>
</parameternamelist>
<parameterdescription>
<para>FDCAN module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the message to be transmitted. If this value is greater than 2047, then an extended ID is automatically selected. Only the lowest 29 bits are kept, so setting the MSB will force an extended ID even if the ID is less than or equal to 2047 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlc</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the packet. If the length does not correspond to a valid FDCAN packet length, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be transmitted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if an error occurred while adding the message to the queue </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="374" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="374" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a5abf7049ba56ae95525c7ef6b043c3fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_CAN_receive_extended_from_queue</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can, CanExtendedMessage_s *received_message)</argsstring>
        <name>core_CAN_receive_extended_from_queue</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <param>
          <type><ref refid="structCanExtendedMessage__s" kindref="compound">CanExtendedMessage_s</ref> *</type>
          <declname>received_message</declname>
        </param>
        <briefdescription>
<para>If a frame is waiting in the RX queue, copy it to the given location. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>can</parametername>
</parameternamelist>
<parameterdescription>
<para>FDCAN module from which the frame is read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>received_message</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the location where the received frame would be stored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>if a frame was copied from the queue into the given location </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="479" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="479" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a5633bcdabb91aa4268b2b135a8ef21fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_CAN_receive_from_queue</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can, CanMessage_s *received_message)</argsstring>
        <name>core_CAN_receive_from_queue</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <param>
          <type><ref refid="structCanMessage__s" kindref="compound">CanMessage_s</ref> *</type>
          <declname>received_message</declname>
        </param>
        <briefdescription>
<para>If a frame is waiting in the RX queue, copy it to the given location. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>can</parametername>
</parameternamelist>
<parameterdescription>
<para>FDCAN module from which the frame is read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>received_message</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the location where the received frame would be stored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>if a frame was copied from the queue into the given location </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="497" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="497" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a59ccd2a37918f52fc0b80607d37652c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FDCAN1_IT0_IRQHandler</definition>
        <argsstring>(void)</argsstring>
        <name>FDCAN1_IT0_IRQHandler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="508" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="508" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="can_8c_1aa72d5b6ac0e81f1e37ffd59603964c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FDCAN2_IT0_IRQHandler</definition>
        <argsstring>(void)</argsstring>
        <name>FDCAN2_IT0_IRQHandler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="509" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="509" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="can_8c_1afff79a9557e20879ea7846d1c927214a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FDCAN3_IT0_IRQHandler</definition>
        <argsstring>(void)</argsstring>
        <name>FDCAN3_IT0_IRQHandler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="510" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="510" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a2939ee64b45b67008f5769ba9d0f5f16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_CAN_add_filter</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can, bool isExtended, uint32_t id1, uint32_t id2)</argsstring>
        <name>core_CAN_add_filter</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isExtended</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id2</declname>
        </param>
        <briefdescription>
<para>Add an RX filter for the given FDCAN module. </para>
        </briefdescription>
        <detaileddescription>
<para>All frames with IDs greater than or equal to <computeroutput>id1</computeroutput> and less than or equal to <computeroutput>id2</computeroutput> will be placed in the RX queue <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>can</parametername>
</parameternamelist>
<parameterdescription>
<para>FDCAN module for which the filter should be created </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isExtended</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies whether the IDs are extended CAN IDs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id1</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound (inclusive) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id2</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bound (inclusive) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>if the filter was added successfully </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/can.c" line="524" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="524" bodyend="552"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Core FDCAN library. </para>
    </briefdescription>
    <detaileddescription>
<para>This core library component is used to interface with the FDCAN hardware.</para>
<sect2 id="can_8c_1autotoc_md9">
<title>Initialization</title>
<para>An FDCAN module is initialized by calling the <ref refid="can_8c_1af5a65d61181a7d9e50f8f42df8a73cf7" kindref="member">core_CAN_init()</ref> function. The CAN bitrate is set to <computeroutput>CORE_CAN_BITRATE</computeroutput>, which is given in bits/second and defined in <computeroutput>core_config.h</computeroutput>. If <computeroutput>CORE_FDCANx_AUTO_RETRANSMISSION</computeroutput> is set to 1 in <computeroutput>core_config.h</computeroutput>, the FDCANx module will be cofigured to automatically retransmit packets that were not acknowledged. If <computeroutput>CORE_FDCANx_USE_FD</computeroutput> is set to 1 in <computeroutput>core_config.h</computeroutput>, the FDCANx module will be able to send and receive FD CAN frames as well as standard CAN frames.</para>
</sect2>
<sect2 id="can_8c_1autotoc_md10">
<title>Transmitting</title>
<para>Transmission on the CAN bus is managed by a FreeRTOS queue and occurs in two parts. First, the user code adds a CAN frame to the queue with <ref refid="can_8c_1ae0e18230790182107643e8c44d59646f" kindref="member">core_CAN_add_message_to_tx_queue()</ref> (classic and FD CAN) or with <ref refid="can_8c_1a78c43d4e3c5280d09a1bca37f9ba986f" kindref="member">core_CAN_add_extended_message_to_tx_queue()</ref> (FD CAN only).</para>
<para>The user code must also run <ref refid="can_8c_1a5956fa458e011f58d514fcfa3f45b72a" kindref="member">core_CAN_send_from_tx_queue_task()</ref> in a dedicated FreeRTOS task. If <ref refid="can_8c_1a5956fa458e011f58d514fcfa3f45b72a" kindref="member">core_CAN_send_from_tx_queue_task()</ref>, an error has occurred while transmitting.</para>
<para>Internally, a FreeRTOS semaphore is used to ensure only one message sits in the hardware CAN queue at a time. The semaphore is given whenever a transmission completes (or fails) and is taken whenever a message is added to the hardware queue.</para>
<para>Alternatively, the user can disable the FreeRTOS queue by defining <computeroutput>CORE_CAN_DISABLE_TX_QUEUE</computeroutput> in <computeroutput>core_config.h</computeroutput>. This is useful if the user needs finer control over the transmission, wants to synchronize CAN transmissions between FDCAN modules, or would like to save SRAM space. The RX queue is not affected and the user can access the semaphore using core_CAN_convert(), but will be responsible for taking the semaphore.</para>
</sect2>
<sect2 id="can_8c_1autotoc_md11">
<title>Receiving</title>
<para>In order to enable receiving CAN frames, the user code must first set up one or more filters using the <ref refid="can_8c_1a2939ee64b45b67008f5769ba9d0f5f16" kindref="member">core_CAN_add_filter()</ref> function. When a frame matching any of the applied filters is received, the FDCAN hardware triggers an interrupt that inserts the contents of this frame into a receiving FreeRTOS queue.</para>
<para>The user code must the define a task that repeatedly calls <ref refid="can_8c_1a5633bcdabb91aa4268b2b135a8ef21fe" kindref="member">core_CAN_receive_from_queue()</ref> (classic CAN) or <ref refid="can_8c_1a5abf7049ba56ae95525c7ef6b043c3fd" kindref="member">core_CAN_receive_extended_from_queue()</ref> (FD CAN only). These functions will return 1 if a frame has been loaded from the queue and 0 otherwise. It is necessary to poll these functions, since they are non-blocking. </para>
</sect2>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;can.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;core_config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stm32g4xx_hal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;FreeRTOS.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;queue.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;semphr.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gpio.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;clock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;timeout.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;error_handler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;boot.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref><sp/>can1;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref><sp/>can2;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref><sp/>can3;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>core_CAN_dlc_lookup[16]<sp/>=<sp/>{0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>12,<sp/>16,<sp/>20,<sp/>24,<sp/>32,<sp/>48,<sp/>64};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rx_handler(FDCAN_GlobalTypeDef<sp/>*can);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_CAN_message_to_rx_queue(FDCAN_GlobalTypeDef<sp/>*can,<sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint8_t<sp/>dlc,<sp/>uint8_t<sp/>*data);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_CAN_extended_message_to_rx_queue(FDCAN_GlobalTypeDef<sp/>*can,<sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint8_t<sp/>dlc,<sp/>uint8_t<sp/>*data,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_fd);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CAN_clock_set_params(FDCAN_HandleTypeDef<sp/>*hfdcan);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref><sp/>*core_CAN_convert(FDCAN_GlobalTypeDef<sp/>*can)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can<sp/>==<sp/>FDCAN1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;can1;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can<sp/>==<sp/>FDCAN2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;can2;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can<sp/>==<sp/>FDCAN3)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;can3;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="can_8c_1af5a65d61181a7d9e50f8f42df8a73cf7" kindref="member">core_CAN_init</ref>(FDCAN_GlobalTypeDef<sp/>*can)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>port<sp/>clock<sp/>based<sp/>on<sp/>which<sp/>CAN<sp/>bus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="clock_8c_1a2b585a218aa24b5c50a5e92538e65615" kindref="member">core_clock_FDCAN_init</ref>(can);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref><sp/>*p_can<sp/>=<sp/>core_CAN_convert(can);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_can<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>pins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>GPIO_InitTypeDef<sp/>gpio<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio.Mode<sp/>=<sp/>GPIO_MODE_AF_PP;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio.Pull<sp/>=<sp/>GPIO_NOPULL;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio.Speed<sp/>=<sp/>GPIO_SPEED_FREQ_VERY_HIGH;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GPIO<sp/>inits<sp/>specific<sp/>to<sp/>different<sp/>CAN<sp/>buses,<sp/>and<sp/>HAL<sp/>GPIO<sp/>inits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can<sp/>==<sp/>FDCAN1)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Instance<sp/>=<sp/>FDCAN1;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpio.Pin<sp/>=<sp/>CORE_FDCAN1_TX_PIN;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpio.Alternate<sp/>=<sp/>CORE_FDCAN1_TX_AF;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_GPIO_Init(CORE_FDCAN1_TX_PORT,<sp/>&amp;gpio);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpio.Pin<sp/>=<sp/>CORE_FDCAN1_RX_PIN;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpio.Alternate<sp/>=<sp/>CORE_FDCAN1_RX_AF;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_GPIO_Init(CORE_FDCAN1_RX_PORT,<sp/>&amp;gpio);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Auto<sp/>retransmission<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Init.AutoRetransmission<sp/>=<sp/>CORE_FDCAN1_AUTO_RETRANSMISSION<sp/>?<sp/>ENABLE<sp/>:<sp/>DISABLE;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;autort<sp/>=<sp/>CORE_FDCAN1_AUTO_RETRANSMISSION;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>max<sp/>filter<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Init.StdFiltersNbr<sp/>=<sp/>CORE_FDCAN1_MAX_STANDARD_FILTER_NUM;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Init.ExtFiltersNbr<sp/>=<sp/>CORE_FDCAN1_MAX_EXTENDED_FILTER_NUM;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extended<sp/>frame<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;use_fd<sp/>=<sp/>CORE_FDCAN1_USE_FD;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can<sp/>==<sp/>FDCAN2)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Instance<sp/>=<sp/>FDCAN2;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpio.Pin<sp/>=<sp/>CORE_FDCAN2_TX_PIN;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpio.Alternate<sp/>=<sp/>CORE_FDCAN2_TX_AF;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_GPIO_Init(CORE_FDCAN2_TX_PORT,<sp/>&amp;gpio);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpio.Pin<sp/>=<sp/>CORE_FDCAN2_RX_PIN;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpio.Alternate<sp/>=<sp/>CORE_FDCAN2_RX_AF;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_GPIO_Init(CORE_FDCAN2_RX_PORT,<sp/>&amp;gpio);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Auto<sp/>retransmission<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Init.AutoRetransmission<sp/>=<sp/>CORE_FDCAN2_AUTO_RETRANSMISSION<sp/>?<sp/>ENABLE<sp/>:<sp/>DISABLE;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;autort<sp/>=<sp/>CORE_FDCAN2_AUTO_RETRANSMISSION;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>max<sp/>filter<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Init.StdFiltersNbr<sp/>=<sp/>CORE_FDCAN2_MAX_STANDARD_FILTER_NUM;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Init.ExtFiltersNbr<sp/>=<sp/>CORE_FDCAN2_MAX_EXTENDED_FILTER_NUM;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extended<sp/>frame<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;use_fd<sp/>=<sp/>CORE_FDCAN2_USE_FD;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can<sp/>==<sp/>FDCAN3)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Instance<sp/>=<sp/>FDCAN3;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpio.Pin<sp/>=<sp/>CORE_FDCAN3_TX_PIN;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpio.Alternate<sp/>=<sp/>CORE_FDCAN3_TX_AF;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_GPIO_Init(CORE_FDCAN3_TX_PORT,<sp/>&amp;gpio);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpio.Pin<sp/>=<sp/>CORE_FDCAN3_RX_PIN;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpio.Alternate<sp/>=<sp/>CORE_FDCAN3_RX_AF;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_GPIO_Init(CORE_FDCAN3_RX_PORT,<sp/>&amp;gpio);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Auto<sp/>retransmission<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Init.AutoRetransmission<sp/>=<sp/>CORE_FDCAN3_AUTO_RETRANSMISSION<sp/>?<sp/>ENABLE<sp/>:<sp/>DISABLE;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;autort<sp/>=<sp/>CORE_FDCAN3_AUTO_RETRANSMISSION;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>max<sp/>filter<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Init.StdFiltersNbr<sp/>=<sp/>CORE_FDCAN3_MAX_STANDARD_FILTER_NUM;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Init.ExtFiltersNbr<sp/>=<sp/>CORE_FDCAN3_MAX_EXTENDED_FILTER_NUM;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extended<sp/>frame<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;use_fd<sp/>=<sp/>CORE_FDCAN3_USE_FD;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>CAN<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Init.ClockDivider<sp/>=<sp/>FDCAN_CLOCK_DIV1;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Init.FrameFormat<sp/>=<sp/>(p_can-&gt;use_fd<sp/>?<sp/>FDCAN_FRAME_FD_NO_BRS<sp/>:<sp/>FDCAN_FRAME_CLASSIC);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Init.Mode<sp/>=<sp/>FDCAN_MODE_NORMAL;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Init.TransmitPause<sp/>=<sp/>DISABLE;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Init.ProtocolException<sp/>=<sp/>ENABLE;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Init.TxFifoQueueMode<sp/>=<sp/>FDCAN_TX_QUEUE_OPERATION;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_clock_set_params(&amp;(p_can-&gt;hfdcan));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>CAN<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAL_FDCAN_Init(&amp;(p_can-&gt;hfdcan))<sp/>!=<sp/>HAL_OK)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reject<sp/>all<sp/>frames<sp/>not<sp/>configured<sp/>in<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAL_FDCAN_ConfigGlobalFilter(&amp;(p_can-&gt;hfdcan),<sp/>FDCAN_REJECT,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FDCAN_REJECT,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FDCAN_REJECT_REMOTE,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FDCAN_REJECT_REMOTE)<sp/>!=<sp/>HAL_OK)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>RX<sp/>interrupts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can<sp/>==<sp/>FDCAN1)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn,<sp/>5,<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>Main<sp/>bus<sp/>has<sp/>slightly<sp/>higher<sp/>priority<sp/>than<sp/>sensor<sp/>bus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can<sp/>==<sp/>FDCAN2)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn,<sp/>5,<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>Main<sp/>bus<sp/>has<sp/>slightly<sp/>higher<sp/>priority<sp/>than<sp/>sensor<sp/>bus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn,<sp/>5,<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>Main<sp/>bus<sp/>has<sp/>slightly<sp/>higher<sp/>priority<sp/>than<sp/>sensor<sp/>bus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>interrupts<sp/>and<sp/>set<sp/>notifications<sp/>for<sp/>CAN<sp/>bus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAL_FDCAN_ConfigInterruptLines(&amp;(p_can-&gt;hfdcan),<sp/>FDCAN_IT_GROUP_RX_FIFO0<sp/>|<sp/>FDCAN_IT_GROUP_SMSG<sp/>|<sp/>FDCAN_IT_GROUP_PROTOCOL_ERROR,<sp/>FDCAN_INTERRUPT_LINE0))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAL_FDCAN_ActivateNotification(&amp;(p_can-&gt;hfdcan),<sp/>FDCAN_IT_RX_FIFO0_NEW_MESSAGE,<sp/>0)<sp/>!=<sp/>HAL_OK)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAL_FDCAN_ActivateNotification(&amp;(p_can-&gt;hfdcan),<sp/>FDCAN_IT_TX_COMPLETE,<sp/>FDCAN_TX_BUFFER0<sp/>|<sp/>FDCAN_TX_BUFFER1<sp/>|<sp/>FDCAN_TX_BUFFER2)<sp/>!=<sp/>HAL_OK)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAL_FDCAN_ActivateNotification(&amp;(p_can-&gt;hfdcan),<sp/>FDCAN_IT_ARB_PROTOCOL_ERROR,<sp/>0)<sp/>!=<sp/>HAL_OK)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(HAL_FDCAN_ActivateNotification(&amp;(p_can-&gt;hfdcan),<sp/>FDCAN_IT_TX_ABORT_COMPLETE,<sp/>FDCAN_TX_BUFFER0<sp/>|<sp/>FDCAN_TX_BUFFER1<sp/>|<sp/>FDCAN_TX_BUFFER2)<sp/>!=<sp/>HAL_OK)<sp/>return<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>queue<sp/>to<sp/>put<sp/>received<sp/>messages<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>msgsize<sp/>=<sp/>(p_can-&gt;use_fd<sp/>?<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structCanExtendedMessage__s" kindref="compound">CanExtendedMessage_s</ref>)<sp/>:<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structCanMessage__s" kindref="compound">CanMessage_s</ref>));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>p_can-&gt;can_queue_rx<sp/>=<sp/>xQueueCreate(CORE_CAN_QUEUE_LENGTH,<sp/>msgsize);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_can-&gt;can_queue_rx<sp/>==<sp/>0)<sp/>error_handler();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CORE_CAN_DISABLE_TX_QUEUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>queue<sp/>to<sp/>put<sp/>outgoing<sp/>messages<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>p_can-&gt;can_queue_tx<sp/>=<sp/>xQueueCreate(CORE_CAN_QUEUE_LENGTH,<sp/>msgsize);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_can-&gt;can_queue_tx<sp/>==<sp/>0)<sp/>error_handler();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>p_can-&gt;can_tx_semaphore<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>xSemaphoreGive(p_can-&gt;can_tx_semaphore);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>can<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAL_FDCAN_Start(&amp;(p_can-&gt;hfdcan))<sp/>!=<sp/>HAL_OK)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CORE_CAN_DISABLE_TX_QUEUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="can_8c_1ae0e18230790182107643e8c44d59646f" kindref="member">core_CAN_add_message_to_tx_queue</ref>(FDCAN_GlobalTypeDef<sp/>*can,<sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint8_t<sp/>dlc,<sp/>uint64_t<sp/>data)</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref><sp/>*p_can<sp/>=<sp/>core_CAN_convert(can);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_can-&gt;use_fd)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCanExtendedMessage__s" kindref="compound">CanExtendedMessage_s</ref><sp/>message;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message.id<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message.dlc<sp/>=<sp/>dlc;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message.use_fd<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(message.data),<sp/>&amp;data,<sp/>8);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xQueueSendToBack(p_can-&gt;can_queue_tx,<sp/>&amp;message,<sp/>0);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCanMessage__s" kindref="compound">CanMessage_s</ref><sp/>message<sp/>=<sp/>{(int)</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>dlc,<sp/>data};</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xQueueSendToBack(p_can-&gt;can_queue_tx,<sp/>&amp;message,<sp/>0);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a78c43d4e3c5280d09a1bca37f9ba986f" kindref="member">core_CAN_add_extended_message_to_tx_queue</ref>(FDCAN_GlobalTypeDef<sp/>*can,<sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint8_t<sp/>dlc,<sp/>uint8_t<sp/>*data)</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref><sp/>*p_can<sp/>=<sp/>core_CAN_convert(can);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(p_can-&gt;use_fd))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dlc<sp/>&gt;<sp/>64)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCanExtendedMessage__s" kindref="compound">CanExtendedMessage_s</ref><sp/>message;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>message.id<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>message.dlc<sp/>=<sp/>dlc;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>message.use_fd<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>(uint8_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>dlc;<sp/>i++)<sp/>message.data[i]<sp/>=<sp/>data[i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;(message.data),<sp/>data,<sp/>dlc);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xQueueSendToBack(p_can-&gt;can_queue_tx,<sp/>&amp;message,<sp/>0);</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a5956fa458e011f58d514fcfa3f45b72a" kindref="member">core_CAN_send_from_tx_queue_task</ref>(FDCAN_GlobalTypeDef<sp/>*can)</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCanExtendedMessage__s" kindref="compound">CanExtendedMessage_s</ref><sp/>dequeuedExtendedMessage;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCanMessage__s" kindref="compound">CanMessage_s</ref><sp/>dequeuedMessage;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref><sp/>*p_can<sp/>=<sp/>core_CAN_convert(can);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>autort<sp/>=<sp/>p_can-&gt;autort;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_can-&gt;use_fd)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>data;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((xQueueReceive(p_can-&gt;can_queue_tx,<sp/>&amp;dequeuedExtendedMessage,<sp/>portMAX_DELAY)<sp/>==<sp/>pdTRUE))<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*if<sp/>(autort)*/</highlight><highlight class="normal"><sp/>xSemaphoreTake(p_can-&gt;can_tx_semaphore,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dequeuedExtendedMessage.use_fd)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="can_8c_1aec814b501cd9c108a515bcbb0e3bf4a4" kindref="member">core_CAN_send_fd_message</ref>(can,<sp/>dequeuedExtendedMessage.id,<sp/>dequeuedExtendedMessage.dlc,<sp/>dequeuedExtendedMessage.data))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;data,<sp/>dequeuedExtendedMessage.data,<sp/>8);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//uint8_t<sp/>dlc<sp/>=<sp/>dequeuedExtendedMessage.dlc;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="can_8c_1a84ba21a70b0eaa5a94ebfa9d80ce0834" kindref="member">core_CAN_send_message</ref>(can,<sp/>dequeuedExtendedMessage.id,<sp/>dequeuedExtendedMessage.dlc,<sp/>data))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((xQueueReceive(p_can-&gt;can_queue_tx,<sp/>&amp;dequeuedMessage,<sp/>portMAX_DELAY)<sp/>==<sp/>pdTRUE))<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*if<sp/>(autort)*/</highlight><highlight class="normal"><sp/>xSemaphoreTake(p_can-&gt;can_tx_semaphore,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="can_8c_1a84ba21a70b0eaa5a94ebfa9d80ce0834" kindref="member">core_CAN_send_message</ref>(can,<sp/>dequeuedMessage.id,<sp/>dequeuedMessage.dlc,<sp/>dequeuedMessage.data))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a84ba21a70b0eaa5a94ebfa9d80ce0834" kindref="member">core_CAN_send_message</ref>(FDCAN_GlobalTypeDef<sp/>*can,<sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint8_t<sp/>dlc,<sp/>uint64_t<sp/>data)</highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref><sp/>*p_can<sp/>=<sp/>core_CAN_convert(can);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>FDCAN_TxHeaderTypeDef<sp/>header<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>header.Identifier<sp/>=<sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&amp;<sp/>0x1fffffff);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>header.IdType<sp/>=<sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>2048<sp/>?<sp/>FDCAN_EXTENDED_ID<sp/>:<sp/>FDCAN_STANDARD_ID);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>header.TxFrameType<sp/>=<sp/>FDCAN_DATA_FRAME;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>header.DataLength<sp/>=<sp/>dlc;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>header.ErrorStateIndicator<sp/>=<sp/>FDCAN_ESI_ACTIVE;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>header.BitRateSwitch<sp/>=<sp/>FDCAN_BRS_OFF;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>header.FDFormat<sp/>=<sp/>FDCAN_CLASSIC_CAN;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>header.TxEventFifoControl<sp/>=<sp/>FDCAN_STORE_TX_EVENTS;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>header.MessageMarker<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((can-&gt;PSR<sp/>&amp;<sp/>(0x3<sp/>&lt;&lt;<sp/>3))<sp/>!=<sp/>(0x01<sp/>&lt;&lt;<sp/>3));</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_StatusTypeDef<sp/>err<sp/>=<sp/>HAL_FDCAN_AddMessageToTxFifoQ(&amp;(p_can-&gt;hfdcan),<sp/>&amp;header,<sp/>(uint8_t*)<sp/>&amp;data);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err<sp/>==<sp/>HAL_OK;</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="can_8c_1aec814b501cd9c108a515bcbb0e3bf4a4" kindref="member">core_CAN_send_fd_message</ref>(FDCAN_GlobalTypeDef<sp/>*can,<sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint8_t<sp/>dlc,<sp/>uint8_t<sp/>*data)</highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref><sp/>*p_can<sp/>=<sp/>core_CAN_convert(can);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>i=0;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(core_CAN_dlc_lookup[i]<sp/>&lt;<sp/>dlc)<sp/>i++;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>FDCAN_TxHeaderTypeDef<sp/>header<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>header.Identifier<sp/>=<sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&amp;<sp/>0x1fffffff);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>header.IdType<sp/>=<sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>2048<sp/>?<sp/>FDCAN_EXTENDED_ID<sp/>:<sp/>FDCAN_STANDARD_ID);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>header.TxFrameType<sp/>=<sp/>FDCAN_DATA_FRAME;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>header.DataLength<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>header.ErrorStateIndicator<sp/>=<sp/>FDCAN_ESI_ACTIVE;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>header.BitRateSwitch<sp/>=<sp/>FDCAN_BRS_OFF;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>header.FDFormat<sp/>=<sp/>FDCAN_FD_CAN;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>header.TxEventFifoControl<sp/>=<sp/>FDCAN_STORE_TX_EVENTS;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>header.MessageMarker<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((can-&gt;PSR<sp/>&amp;<sp/>(0x3<sp/>&lt;&lt;<sp/>3))<sp/>!=<sp/>(0x01<sp/>&lt;&lt;<sp/>3));</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_StatusTypeDef<sp/>err<sp/>=<sp/>HAL_FDCAN_AddMessageToTxFifoQ(&amp;(p_can-&gt;hfdcan),<sp/>&amp;header,<sp/>data);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err<sp/>==<sp/>HAL_OK;</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rx_handler(FDCAN_GlobalTypeDef<sp/>*can)</highlight></codeline>
<codeline lineno="398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref><sp/>*p_can<sp/>=<sp/>core_CAN_convert(can);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>interrupt<sp/>flag<sp/>is<sp/>set<sp/>for<sp/>FIFO0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_can-&gt;hfdcan.Instance-&gt;IR<sp/>&amp;<sp/>FDCAN_IT_RX_FIFO0_NEW_MESSAGE)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>interrupt<sp/>flag<sp/>for<sp/>FIFO0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Instance-&gt;IR<sp/>=<sp/>FDCAN_IT_RX_FIFO0_NEW_MESSAGE;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FDCAN_RxHeaderTypeDef<sp/>header;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>data[64];</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>Rx<sp/>messages<sp/>from<sp/>RX<sp/>FIFO0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAL_FDCAN_GetRxMessage(&amp;(p_can-&gt;hfdcan),<sp/>FDCAN_RX_FIFO0,<sp/>&amp;header,<sp/>data)<sp/>!=<sp/>HAL_OK)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_handler();</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="gpio_8c_1a5e894851f0d0aa9792d8407a40e811a1" kindref="member">core_GPIO_toggle_heartbeat</ref>();</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enter<sp/>the<sp/>bootloader<sp/>if<sp/>the<sp/>the<sp/>boot<sp/>ID<sp/>or<sp/>the<sp/>broadcast<sp/>ID<sp/>is<sp/>received</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((header.IdType<sp/>==<sp/>FDCAN_EXTENDED_ID)<sp/>&amp;&amp;<sp/>((header.Identifier<sp/>==<sp/>(CORE_BOOT_FDCAN_ID<sp/>&lt;&lt;<sp/>18))<sp/>||<sp/>(header.Identifier<sp/>==<sp/>(0x7ff<sp/>&lt;&lt;<sp/>18))))<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//core_GPIO_toggle_heartbeat();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="boot_8c_1ab2be0dfac3cabc71734c82636d313d87" kindref="member">core_boot_reset_and_enter</ref>();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timeout_8c_1a4fdb5d680ce585ff6d985fdac54b773e" kindref="member">core_timeout_reset_by_module_ref</ref>(can,<sp/>header.Identifier);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>message<sp/>to<sp/>the<sp/>RX<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header.IdType<sp/>==<sp/>FDCAN_EXTENDED_ID)<sp/>header.Identifier<sp/>|=<sp/>(1&lt;&lt;30);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_can-&gt;use_fd)<sp/>add_CAN_extended_message_to_rx_queue(can,<sp/>header.Identifier,<sp/>core_CAN_dlc_lookup[header.DataLength],<sp/>data,<sp/>header.FDFormat<sp/>==<sp/>FDCAN_FD_CAN);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>add_CAN_message_to_rx_queue(can,<sp/>header.Identifier,<sp/>core_CAN_dlc_lookup[header.DataLength],<sp/>data);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_can-&gt;hfdcan.Instance-&gt;IR<sp/>&amp;<sp/>FDCAN_IR_TC)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>interrupt<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Instance-&gt;IR<sp/>=<sp/>FDCAN_IR_TC;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseType_t<sp/>xHigherPriorityTaskWoken<sp/>=<sp/>pdFALSE;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreGiveFromISR(p_can-&gt;can_tx_semaphore,<sp/>&amp;xHigherPriorityTaskWoken);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portYIELD_FROM_ISR(xHigherPriorityTaskWoken);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_can-&gt;hfdcan.Instance-&gt;IR<sp/>&amp;<sp/>FDCAN_IR_PEA)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_can-&gt;hfdcan.Instance-&gt;IR<sp/>=<sp/>FDCAN_IR_PEA;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseType_t<sp/>xHigherPriorityTaskWoken<sp/>=<sp/>pdFALSE;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreGiveFromISR(p_can-&gt;can_tx_semaphore,<sp/>&amp;xHigherPriorityTaskWoken);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portYIELD_FROM_ISR(xHigherPriorityTaskWoken);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_CAN_extended_message_to_rx_queue(FDCAN_GlobalTypeDef<sp/>*can,<sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint8_t<sp/>dlc,<sp/>uint8_t<sp/>*data,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_fd)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref><sp/>*p_can<sp/>=<sp/>core_CAN_convert(can);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCanExtendedMessage__s" kindref="compound">CanExtendedMessage_s</ref><sp/>rx_msg;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>rx_msg.id<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>rx_msg.dlc<sp/>=<sp/>dlc;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>rx_msg.use_fd<sp/>=<sp/>use_fd;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(rx_msg.data,<sp/>data,<sp/>dlc);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseType_t<sp/>xHigherPriorityTaskWoken<sp/>=<sp/>pdFALSE;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>xQueueSendFromISR(p_can-&gt;can_queue_rx,<sp/>&amp;rx_msg,<sp/>&amp;xHigherPriorityTaskWoken);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xHigherPriorityTaskWoken)<sp/>portYIELD_FROM_ISR(xHigherPriorityTaskWoken);</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_CAN_message_to_rx_queue(FDCAN_GlobalTypeDef<sp/>*can,<sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint8_t<sp/>dlc,<sp/>uint8_t<sp/>*data)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref><sp/>*p_can<sp/>=<sp/>core_CAN_convert(can);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>msg_data<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;msg_data,<sp/>data,<sp/>dlc);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCanMessage__s" kindref="compound">CanMessage_s</ref><sp/>rx_msg;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>rx_msg.data<sp/>=<sp/>msg_data;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>rx_msg.id<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>rx_msg.dlc<sp/>=<sp/>dlc;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseType_t<sp/>xHigherPriorityTaskWoken<sp/>=<sp/>pdFALSE;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>xQueueSendFromISR(p_can-&gt;can_queue_rx,<sp/>&amp;rx_msg,<sp/>&amp;xHigherPriorityTaskWoken);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xHigherPriorityTaskWoken)<sp/>portYIELD_FROM_ISR(xHigherPriorityTaskWoken);</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a5abf7049ba56ae95525c7ef6b043c3fd" kindref="member">core_CAN_receive_extended_from_queue</ref>(FDCAN_GlobalTypeDef<sp/>*can,<sp/><ref refid="structCanExtendedMessage__s" kindref="compound">CanExtendedMessage_s</ref><sp/>*received_message)</highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref><sp/>*p_can<sp/>=<sp/>core_CAN_convert(can);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_can<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Receive<sp/>CAN<sp/>message<sp/>from<sp/>queue,<sp/>copy<sp/>it<sp/>to<sp/>buffer<sp/>&quot;received_message&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>true<sp/>if<sp/>it<sp/>read<sp/>a<sp/>value<sp/>from<sp/>the<sp/>queue,<sp/>false<sp/>if<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(xQueueReceive(p_can-&gt;can_queue_rx,<sp/>received_message,<sp/>pdMS_TO_TICKS(CORE_CAN_RX_TIMEOUT))<sp/>==<sp/>pdTRUE);</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a5633bcdabb91aa4268b2b135a8ef21fe" kindref="member">core_CAN_receive_from_queue</ref>(FDCAN_GlobalTypeDef<sp/>*can,<sp/><ref refid="structCanMessage__s" kindref="compound">CanMessage_s</ref><sp/>*received_message)</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref><sp/>*p_can<sp/>=<sp/>core_CAN_convert(can);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_can<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Receive<sp/>CAN<sp/>message<sp/>from<sp/>queue,<sp/>copy<sp/>it<sp/>to<sp/>buffer<sp/>&quot;received_message&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>true<sp/>if<sp/>it<sp/>read<sp/>a<sp/>value<sp/>from<sp/>the<sp/>queue,<sp/>false<sp/>if<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(xQueueReceive(p_can-&gt;can_queue_rx,<sp/>received_message,<sp/>pdMS_TO_TICKS(CORE_CAN_RX_TIMEOUT))<sp/>==<sp/>pdTRUE);</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>RX<sp/>interrupt<sp/>handlers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FDCAN1_IT0_IRQHandler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{rx_handler(FDCAN1);}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FDCAN2_IT0_IRQHandler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{rx_handler(FDCAN2);}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FDCAN3_IT0_IRQHandler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{rx_handler(FDCAN3);}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a2939ee64b45b67008f5769ba9d0f5f16" kindref="member">core_CAN_add_filter</ref>(FDCAN_GlobalTypeDef<sp/>*can,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isExtended,<sp/>uint32_t<sp/>id1,<sp/>uint32_t<sp/>id2)</highlight></codeline>
<codeline lineno="525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref><sp/>*p_can<sp/>=<sp/>core_CAN_convert(can);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_can<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*p_num_filters;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>max_filter_num;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>for<sp/>each<sp/>CAN<sp/>bus,<sp/>whether<sp/>it&apos;s<sp/>standard<sp/>or<sp/>extended</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isExtended)<sp/>max_filter_num<sp/>=<sp/>p_can-&gt;hfdcan.Init.ExtFiltersNbr;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>max_filter_num<sp/>=<sp/>p_can-&gt;hfdcan.Init.StdFiltersNbr;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isExtended)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_num_filters<sp/>=<sp/>&amp;(p_can-&gt;fdcan_num_extended_filters);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_num_filters<sp/>=<sp/>&amp;(p_can-&gt;fdcan_num_standard_filters);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p_num_filters<sp/>+<sp/>1<sp/>&gt;<sp/><sp/>max_filter_num)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>FDCAN_FilterTypeDef<sp/>filter;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>filter.IdType<sp/>=<sp/>isExtended<sp/>?<sp/>FDCAN_EXTENDED_ID<sp/>:<sp/>FDCAN_STANDARD_ID;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>filter.FilterIndex<sp/>=<sp/>*p_num_filters;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>filter.FilterType<sp/>=<sp/>FDCAN_FILTER_RANGE;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>filter.FilterConfig<sp/>=<sp/>FDCAN_FILTER_TO_RXFIFO0;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>filter.FilterID1<sp/>=<sp/>id1;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>filter.FilterID2<sp/>=<sp/>id2;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>*p_num_filters<sp/>=<sp/>*p_num_filters<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HAL_FDCAN_ConfigFilter(&amp;(p_can-&gt;hfdcan),<sp/>&amp;filter)<sp/>==<sp/>HAL_OK;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CAN_clock_set_params(FDCAN_HandleTypeDef<sp/>*hfdcan)</highlight></codeline>
<codeline lineno="555"><highlight class="normal">{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>hfdcan-&gt;Init.NominalPrescaler<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>hfdcan-&gt;Init.NominalSyncJumpWidth<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>hfdcan-&gt;Init.DataPrescaler<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Data<sp/>timing<sp/>fields<sp/>unused<sp/>for<sp/>classic<sp/>CAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>hfdcan-&gt;Init.DataSyncJumpWidth<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>hfdcan-&gt;Init.DataTimeSeg1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>hfdcan-&gt;Init.DataTimeSeg2<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CAN<sp/>BitRate<sp/>=<sp/>SysClk/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(APB1ClockDivider<sp/>*<sp/>NominalPrescaler<sp/>*<sp/>(1<sp/>+<sp/>NominalTimeSeg1<sp/>+<sp/>NominalTimeSeg2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ns_sum<sp/>=<sp/>(((double)CORE_CLOCK_SYSCLK_FREQ<sp/>*<sp/>1000)/(double)(CORE_CAN_BITRATE<sp/>*<sp/>1<sp/>*<sp/>8))<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>of<sp/>both<sp/>time<sp/>segments<sp/>is<sp/>not<sp/>an<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(floor(ns_sum)<sp/>!=<sp/>ns_sum)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>NominalTimeSeg1<sp/>~75%<sp/>of<sp/>the<sp/>sum<sp/>of<sp/>it<sp/>and<sp/>NominalTimeSeg2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>seg1<sp/>=<sp/>round(ns_sum<sp/>*<sp/>0.85);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>seg2<sp/>=<sp/>ns_sum<sp/>-<sp/>seg1;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>hfdcan-&gt;Init.NominalTimeSeg1<sp/>=<sp/>seg1;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>hfdcan-&gt;Init.NominalTimeSeg2<sp/>=<sp/>seg2;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/matthias/racing/core/src/driver/Src/can.c"/>
  </compounddef>
</doxygen>
