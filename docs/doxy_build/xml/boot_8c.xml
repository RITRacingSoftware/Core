<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="boot_8c" kind="file" language="C++">
    <compoundname>boot.c</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="usart_8h" local="yes">usart.h</includes>
    <includes refid="gpio_8h" local="yes">gpio.h</includes>
    <includes refid="clock_8h" local="yes">clock.h</includes>
    <includes refid="can_8h" local="yes">can.h</includes>
    <includes refid="error__handler_8h" local="yes">error_handler.h</includes>
    <includes local="yes">core_config.h</includes>
    <includes local="yes">stm32g4xx_hal.h</includes>
    <incdepgraph>
      <node id="11">
        <label>can.h</label>
        <link refid="can_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>clock.h</label>
        <link refid="clock_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>error_handler.h</label>
        <link refid="error__handler_8h_source"/>
      </node>
      <node id="9">
        <label>gpio.h</label>
        <link refid="gpio_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>usart.h</label>
        <link refid="usart_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/driver/Src/boot.c</label>
        <link refid="boot_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>FreeRTOS.h</label>
      </node>
      <node id="8">
        <label>core_config.h</label>
      </node>
      <node id="13">
        <label>queue.h</label>
      </node>
      <node id="14">
        <label>semphr.h</label>
      </node>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="6">
        <label>stm32g4xx_hal.h</label>
      </node>
      <node id="7">
        <label>stm32g4xx_hal_usart.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="boot_8c_1a7c90e3d19ed94dfa33b60685c7428c77" prot="public" static="no">
        <name>BOOTSTATE</name>
        <initializer>__attribute__ ((section (&quot;.bootstate&quot;)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="246" column="9" bodyfile="src/driver/Src/boot.c" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1a4fc8f7191e911197da65c33f72ce8381" prot="public" static="no">
        <name>BOOTPROGNAME</name>
        <initializer>__attribute__ ((section (&quot;.progname&quot;))) __attribute__ ((__used__))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="247" column="9" bodyfile="src/driver/Src/boot.c" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1a29693d620c6ad33c3355b5a50551c3e6" prot="public" static="no">
        <name>ALTBANK_BASE</name>
        <initializer>0x08040000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="249" column="9" bodyfile="src/driver/Src/boot.c" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1a04f24a8a30c822a9eba74b5f85891682" prot="public" static="no">
        <name>BOOT_STATE_KEY</name>
        <initializer>0xABCDEF00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="268" column="9" bodyfile="src/driver/Src/boot.c" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1a130489ae854e12b78d240992ae15f796" prot="public" static="no">
        <name>BOOT_STATE_NORMAL</name>
        <initializer>0x00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="269" column="9" bodyfile="src/driver/Src/boot.c" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1a19d1df504d3cd4ea0573d7345547a186" prot="public" static="no">
        <name>BOOT_STATE_VERIFY</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="270" column="9" bodyfile="src/driver/Src/boot.c" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1a374ddab2f5e387e175db32effcab51da" prot="public" static="no">
        <name>BOOT_STATE_VERIFY_SOFT_SWITCH</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="271" column="9" bodyfile="src/driver/Src/boot.c" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1a9b7c831ec055ef3ff25889b6a656dca6" prot="public" static="no">
        <name>BOOT_STATE_SOFT_SWITCHED</name>
        <initializer>0x04</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="272" column="9" bodyfile="src/driver/Src/boot.c" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1a6467331ede146fbd11dcb1005501762d" prot="public" static="no">
        <name>BOOT_STATE_VERIFIED</name>
        <initializer>0x08</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="273" column="9" bodyfile="src/driver/Src/boot.c" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1a62f0b8e9500ecaf044593412c6271b58" prot="public" static="no">
        <name>BOOT_STATE_ENTER</name>
        <initializer>0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="274" column="9" bodyfile="src/driver/Src/boot.c" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1a17c50cd2d01c2a92908b5820ae9d9720" prot="public" static="no">
        <name>BOOT_STATE_ERROR</name>
        <initializer>0x80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="275" column="9" bodyfile="src/driver/Src/boot.c" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1aaad4d0d5a96038d882593eac56794f70" prot="public" static="no">
        <name>BOOT_STATE_NB_ERROR</name>
        <initializer>0x40</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="276" column="9" bodyfile="src/driver/Src/boot.c" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1a2922095e24d0bcdbe14f36875a7fdc2c" prot="public" static="no">
        <name>BOOT_STATUS_OK</name>
        <initializer>0x00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="278" column="9" bodyfile="src/driver/Src/boot.c" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1a434868841c8c53b1e0826be614186469" prot="public" static="no">
        <name>BOOT_STATUS_INVALID_ADDRESS</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="279" column="9" bodyfile="src/driver/Src/boot.c" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1aed2fde3cc10c8e86ea494c7b9425c667" prot="public" static="no">
        <name>BOOT_STATUS_ERASE_ERROR</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="280" column="9" bodyfile="src/driver/Src/boot.c" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1a7bb57823f134b6a675acd22bcdc42fb6" prot="public" static="no">
        <name>BOOT_STATUS_PROG_ERROR</name>
        <initializer>0x03</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="281" column="9" bodyfile="src/driver/Src/boot.c" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1a57918f97084378c0147f47ae51d36a99" prot="public" static="no">
        <name>BOOT_STATUS_STATE_ERROR</name>
        <initializer>0x04</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="282" column="9" bodyfile="src/driver/Src/boot.c" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1acdd43a1cdbed7509ae5b0aa832d716bc" prot="public" static="no">
        <name>BOOT_STATUS_NB_ERROR</name>
        <initializer>0x05</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="283" column="9" bodyfile="src/driver/Src/boot.c" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1ae6cc014e6b15b7a1ba1801072e07d277" prot="public" static="no">
        <name>BOOT_OPCODE_RESET</name>
        <initializer>0x00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="285" column="9" bodyfile="src/driver/Src/boot.c" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1aea60371d81c269e9c08e1113428e7c73" prot="public" static="no">
        <name>BOOT_OPCODE_SOFTSWAP</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="286" column="9" bodyfile="src/driver/Src/boot.c" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1a7d68f636b1bd0a49eaeb1cf375c153d4" prot="public" static="no">
        <name>BOOT_OPCODE_VERIFY</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="287" column="9" bodyfile="src/driver/Src/boot.c" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="boot_8c_1aab5baf664321d7da74cfe4488be88ead" prot="public" static="no">
        <name>BOOT_OPCODE_HARDSWAP</name>
        <initializer>0x03</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="288" column="9" bodyfile="src/driver/Src/boot.c" bodystart="288" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="boot_8c_1a709767f30bbe0160deb9d7ec4c63a533" prot="public" static="no" mutable="no">
        <type>const char BOOTPROGNAME</type>
        <definition>const char BOOTPROGNAME progname[32]</definition>
        <argsstring>[32]</argsstring>
        <name>progname</name>
        <initializer>= PROGRAM_NAME_STRING</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="251" column="25" bodyfile="src/driver/Src/boot.c" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="boot_8c_1a43d0f36c200b02cf94c4109641d65549" prot="public" static="no" mutable="no">
        <type>uint32_t BOOTSTATE</type>
        <definition>uint32_t BOOTSTATE boot_state</definition>
        <argsstring></argsstring>
        <name>boot_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="253" column="20" bodyfile="src/driver/Src/boot.c" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="boot_8c_1a27e83d0afb8dd4acbe24448a9b188e52" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t boot_toggle[8]</definition>
        <argsstring>[8]</argsstring>
        <name>boot_toggle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="257" column="10" bodyfile="src/driver/Src/boot.c" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="boot_8c_1a34412b147d42dabb2c87c1f2f13ba4bb" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t boot_reset_state</definition>
        <argsstring></argsstring>
        <name>boot_reset_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="258" column="10" bodyfile="src/driver/Src/boot.c" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="boot_8c_1a055867ccfb293b10efcd20729821a357" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t page_erased[4]</definition>
        <argsstring>[4]</argsstring>
        <name>page_erased</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="260" column="17" bodyfile="src/driver/Src/boot.c" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="boot_8c_1ac0d31ca829f934cccd89f8054e02773e" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t address</definition>
        <argsstring></argsstring>
        <name>address</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="261" column="17" bodyfile="src/driver/Src/boot.c" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="boot_8c_1abaabdc509cdaba7df9f56c6c76f3ae19" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="262" column="17" bodyfile="src/driver/Src/boot.c" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="boot_8c_1a24258fdec2f37c61f6709ab75d080218" prot="public" static="yes" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t databuf[100]</definition>
        <argsstring>[100]</argsstring>
        <name>databuf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="263" column="16" bodyfile="src/driver/Src/boot.c" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="boot_8c_1a99dfdf2df564bd589b6d3c1d5e3a654d" prot="public" static="yes" mutable="no">
        <type>FDCAN_HandleTypeDef *</type>
        <definition>FDCAN_HandleTypeDef* hfdcan</definition>
        <argsstring></argsstring>
        <name>hfdcan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="265" column="28" bodyfile="src/driver/Src/boot.c" bodystart="265" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="boot_8c_1a8422dff7830d6235171228d40177a36f" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void boot_soft_toggle</definition>
        <argsstring>()</argsstring>
        <name>boot_soft_toggle</name>
        <briefdescription>
<para>Soft bank swap. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is defined in startup_stm32g473xx.s </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="295" column="13" declfile="src/driver/Src/boot.c" declline="295" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="boot_8c_1a7c6ce3603114a5cb4c56d3c85cdce927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void boot_reset</definition>
        <argsstring>()</argsstring>
        <name>boot_reset</name>
        <briefdescription>
<para>Reset the chip. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="300" column="6" bodyfile="src/driver/Src/boot.c" bodystart="300" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="boot_8c_1a57516d5955e696bf83e2915c7a8d1857" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t check_nonbooting</definition>
        <argsstring>()</argsstring>
        <name>check_nonbooting</name>
        <briefdescription>
<para>Check if the program currently running is running from the non-booting bank. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>The program currently running is in the booting bank </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>The program currently running is in the non-booting bank </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="313" column="10" bodyfile="src/driver/Src/boot.c" bodystart="313" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="boot_8c_1a8ede44e2fb3943e5c88c0b87d17c1755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void boot_state_machine</definition>
        <argsstring>()</argsstring>
        <name>boot_state_machine</name>
        <briefdescription>
<para>Process the current boot state and swap banks if needed. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called from startup_stm32g473xx.s and is called before the HAL is initialized and before the RAM is initialized. The boot state is preserved in a special section (.bootstate) at the end of the RAM that is not initialized, so its contents are preserved between resets. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="325" column="6" bodyfile="src/driver/Src/boot.c" bodystart="325" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="boot_8c_1a2f0adbd8c38720906b0d7a381953b25f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void boot_bankswap</definition>
        <argsstring>()</argsstring>
        <name>boot_bankswap</name>
        <briefdescription>
<para>Change the BFB2 bit in the option bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="400" column="13" bodyfile="src/driver/Src/boot.c" bodystart="400" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="boot_8c_1a5e126e050b8c54b0b56f44ea26fc7095" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void boot_transmit_can</definition>
        <argsstring>(uint8_t length, bool is_data)</argsstring>
        <name>boot_transmit_can</name>
        <param>
          <type>uint8_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_data</declname>
        </param>
        <briefdescription>
<para>Transmit an FDCAN message in the bootloader FDCAN format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data to be transmitted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_data</parametername>
</parameternamelist>
<parameterdescription>
<para>1 for data, 0 for status messages </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="420" column="13" bodyfile="src/driver/Src/boot.c" bodystart="420" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="boot_8c_1a802eab4cf6dea515c782168aa59b9ff8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void boot_transmit_status</definition>
        <argsstring>(uint8_t code)</argsstring>
        <name>boot_transmit_status</name>
        <param>
          <type>uint8_t</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Transmit a bootloader status message over FDCAN. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Bootloader status code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="437" column="13" bodyfile="src/driver/Src/boot.c" bodystart="437" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="boot_8c_1a91dd4214fc671646ca73886b1449a47e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t boot_await_data</definition>
        <argsstring>()</argsstring>
        <name>boot_await_data</name>
        <briefdescription>
<para>Wait for data to come in over FDCAN. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Length of the data received, or 0 if the message is a control message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="453" column="16" bodyfile="src/driver/Src/boot.c" bodystart="453" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="boot_8c_1a2c6fab833a1dca4bd1b551321df11ebd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>static int8_t boot_program_and_verify</definition>
        <argsstring>(uint8_t length)</argsstring>
        <name>boot_program_and_verify</name>
        <param>
          <type>uint8_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="505" column="15" bodyfile="src/driver/Src/boot.c" bodystart="505" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="boot_8c_1ac50140136781ee6c565fbe98491f1a29" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void boot</definition>
        <argsstring>()</argsstring>
        <name>boot</name>
        <briefdescription>
<para>Main code for the bootloader. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="558" column="13" bodyfile="src/driver/Src/boot.c" bodystart="558" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="boot_8c_1ab2be0dfac3cabc71734c82636d313d87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void core_boot_reset_and_enter</definition>
        <argsstring>()</argsstring>
        <name>core_boot_reset_and_enter</name>
        <briefdescription>
<para>Reset the chip and enter the bootloader. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="599" column="6" bodyfile="src/driver/Src/boot.c" bodystart="599" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="boot_8c_1a17df2565b3ec70a6a540f71a38bc4cdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void core_boot_init</definition>
        <argsstring>()</argsstring>
        <name>core_boot_init</name>
        <briefdescription>
<para>Initialize the FDCAN filters, check the boot state, and enter the bootloader if necessary. If the state is not valid, an error message will be transmitted. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function should be called after the FDCAN module is initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/driver/Src/boot.c" line="623" column="6" bodyfile="src/driver/Src/boot.c" bodystart="623" bodyend="666"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Core bootloader. </para>
    </briefdescription>
    <detaileddescription>
<para>This core library component implements a bootloader that allows boards to be programmed over CAN.</para>
<sect1 id="boot_8c_1autotoc_md2_1s1"><sect2 id="boot_8c_1autotoc_md2">
<title>Theory of operation</title><para>The STM32G473 has 512k of FLASH, which is split into two banks of 256k each. The chip can be configured to boot either from the first or the second bank by configuring the non-volatile <computeroutput>BFB2</computeroutput> bit in the option byte registers. When the <computeroutput>BFB2</computeroutput> bit is set in the FLASH option byte register, the boots from the second bank, otherwise, it boots from the first bank. However, there is also an option to temporarily swap the banks and run the code in the second bank even when booting from the first bank. This allows the code in the non-booting bank to be verified before finalizing the swap. If the verification fails, then the chip will fall back to the working code in the booting bank.</para>
<para>Programming a board takes place according to the following process:<orderedlist>
<listitem><para>The programmer sends a command to the target board to enter the bootloader</para>
</listitem><listitem><para>The programmer sends program data to the target board. The target board writes the program data to the non-booting bank</para>
</listitem><listitem><para>After each block of data is written, the target board reads the block back so the programmer can verify it</para>
</listitem><listitem><para>Once all of the data has been written, the programmer commands the target board to switch to the non-booting bank</para>
</listitem><listitem><para>The target board board resets and performs a soft bank swap</para>
</listitem><listitem><para>The programmer commands the target board to enter the bootloader in the non-booting bank</para>
</listitem><listitem><para>The programmer sends a command to the bootloader in the non-booting bank to verify that FDCAN communication is working</para>
</listitem><listitem><para>The programmer commands the target board to binalize the bank swap</para>
</listitem><listitem><para>The target board updates the option byte, resets, and runs the new code</para>
</listitem></orderedlist>
</para>
<para>The bootloader keeps track of its state across resets and between banks using the <computeroutput>boot_state</computeroutput> variable, which is stored at the highest RAM address (above the stack). This variable is not initialized when the chip is reset, so its value is always preserved unless the chip is power cycled. The highest 24 bits of <computeroutput>boot_state</computeroutput> are known as the boot key and must always be set to <computeroutput>0xABCDEF</computeroutput>. If the boot key is incorrect, an error is raised. This might occur if the <computeroutput>boot_state</computeroutput> variable is not correctly configured.</para>
</sect2></sect1>
<sect1 id="boot_8c_1autotoc_md3_1s1"><sect2 id="boot_8c_1autotoc_md3">
<title>FDCAN format</title><para>The bootloader communicates with the programmer board using FDCAN with extended IDs. The extra bits in the ID are used to communicate they type of message and the address to be programmed (if required), so all 64 bytes in the body of the message can be used for data.</para>
<para>Each board has a unique board ID and master ID, so the master will respond to several IDs, one for each device that can be programmed. The 29-bit extended board IDs have the following format: <table rows="4" cols="16"><row>
<entry thead="no"><para>31</para>
</entry><entry thead="no"><para>30</para>
</entry><entry thead="no"><para>29</para>
</entry><entry thead="no"><para>28</para>
</entry><entry thead="no"><para>27</para>
</entry><entry thead="no"><para>26</para>
</entry><entry thead="no"><para>25</para>
</entry><entry thead="no"><para>24 </para>
</entry><entry thead="no"><para>23</para>
</entry><entry thead="no"><para>22</para>
</entry><entry thead="no"><para>21</para>
</entry><entry thead="no"><para>20</para>
</entry><entry thead="no"><para>19</para>
</entry><entry thead="no"><para>18</para>
</entry><entry thead="no"><para>17</para>
</entry><entry thead="no"><para>16  </para>
</entry></row>
<row>
<entry thead="no" colspan="3"><para></para>
</entry><entry thead="no" colspan="11"><para><computeroutput>ID[10:0]</computeroutput> </para>
</entry><entry thead="no"><para>CTRL </para>
</entry><entry thead="no"><para><computeroutput>RD/</computeroutput>WR  </para>
</entry></row>
<row>
<entry thead="no"><para>15</para>
</entry><entry thead="no"><para>14</para>
</entry><entry thead="no"><para>13</para>
</entry><entry thead="no"><para>12</para>
</entry><entry thead="no"><para>11</para>
</entry><entry thead="no"><para>10</para>
</entry><entry thead="no"><para>9</para>
</entry><entry thead="no"><para>8 </para>
</entry><entry thead="no"><para>7</para>
</entry><entry thead="no"><para>6</para>
</entry><entry thead="no"><para>5</para>
</entry><entry thead="no"><para>4</para>
</entry><entry thead="no"><para>3</para>
</entry><entry thead="no"><para>2</para>
</entry><entry thead="no"><para>1</para>
</entry><entry thead="no"><para>0  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>PAD</computeroutput> </para>
</entry><entry thead="no" colspan="15"><para><computeroutput>ADDR[14:0]</computeroutput>  </para>
</entry></row>
</table>
</para>
<para><itemizedlist>
<listitem><para><computeroutput>ID[10:0]</computeroutput>: slave ID, used for arbitration</para>
</listitem><listitem><para>CTRL: 0 for a control frame, 1 for a data frame</para>
</listitem><listitem><para><computeroutput>RD/</computeroutput>WR: 1 to read from the slave, 0 to write to the slave</para>
</listitem><listitem><para><computeroutput>PAD</computeroutput>: Set if the last doubleword in the frame is a padding doubleword</para>
</listitem><listitem><para><computeroutput>ADDR[14:0]</computeroutput>: Doubleword address</para>
</listitem></itemizedlist>
</para>
<para>The master IDs have the following format: <table rows="4" cols="16"><row>
<entry thead="no"><para>31</para>
</entry><entry thead="no"><para>30</para>
</entry><entry thead="no"><para>29</para>
</entry><entry thead="no"><para>28</para>
</entry><entry thead="no"><para>27</para>
</entry><entry thead="no"><para>26</para>
</entry><entry thead="no"><para>25</para>
</entry><entry thead="no"><para>24 </para>
</entry><entry thead="no"><para>23</para>
</entry><entry thead="no"><para>22</para>
</entry><entry thead="no"><para>21</para>
</entry><entry thead="no"><para>20</para>
</entry><entry thead="no"><para>19</para>
</entry><entry thead="no"><para>18</para>
</entry><entry thead="no"><para>17</para>
</entry><entry thead="no"><para>16  </para>
</entry></row>
<row>
<entry thead="no" colspan="3"><para></para>
</entry><entry thead="no" colspan="11"><para><computeroutput>ID[10:0]</computeroutput> </para>
</entry><entry thead="no"><para>1 </para>
</entry><entry thead="no"><para><computeroutput>DATA/</computeroutput>STAT  </para>
</entry></row>
<row>
<entry thead="no"><para>15</para>
</entry><entry thead="no"><para>14</para>
</entry><entry thead="no"><para>13</para>
</entry><entry thead="no"><para>12</para>
</entry><entry thead="no"><para>11</para>
</entry><entry thead="no"><para>10</para>
</entry><entry thead="no"><para>9</para>
</entry><entry thead="no"><para>8 </para>
</entry><entry thead="no"><para>7</para>
</entry><entry thead="no"><para>6</para>
</entry><entry thead="no"><para>5</para>
</entry><entry thead="no"><para>4</para>
</entry><entry thead="no"><para>3</para>
</entry><entry thead="no"><para>2</para>
</entry><entry thead="no"><para>1</para>
</entry><entry thead="no"><para>0  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>PAD</computeroutput> </para>
</entry><entry thead="no" colspan="15"><para><computeroutput>ADDR[14:0]</computeroutput>  </para>
</entry></row>
</table>
<itemizedlist>
<listitem><para><computeroutput>ID[10:0]</computeroutput>: master ID, used for arbitration</para>
</listitem><listitem><para><computeroutput>DATA/</computeroutput>STAT: 1 if the frame contains data (echo or read), 0 if the frame contains a status message</para>
</listitem><listitem><para><computeroutput>PAD</computeroutput>: Set if the last doubleword in the frame is a padding doubleword</para>
</listitem><listitem><para><computeroutput>ADDR[15:0]</computeroutput>: Doubleword address</para>
</listitem></itemizedlist>
</para>
<para>Status messages transmitted from a board to the programmer are 64 bits long and have the following format: <table rows="8" cols="16"><row>
<entry thead="no"><para>63</para>
</entry><entry thead="no"><para>62</para>
</entry><entry thead="no"><para>61</para>
</entry><entry thead="no"><para>60</para>
</entry><entry thead="no"><para>59</para>
</entry><entry thead="no"><para>58</para>
</entry><entry thead="no"><para>57</para>
</entry><entry thead="no"><para>56 </para>
</entry><entry thead="no"><para>55</para>
</entry><entry thead="no"><para>54</para>
</entry><entry thead="no"><para>53</para>
</entry><entry thead="no"><para>52</para>
</entry><entry thead="no"><para>51</para>
</entry><entry thead="no"><para>50</para>
</entry><entry thead="no"><para>49</para>
</entry><entry thead="no"><para>48  </para>
</entry></row>
<row>
<entry thead="no" colspan="8"><para><computeroutput>STATUS[7:0]</computeroutput> </para>
</entry><entry thead="no" colspan="6"><para></para>
</entry><entry thead="no"><para><computeroutput>BFB2</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>MEMRMP</computeroutput>  </para>
</entry></row>
<row>
<entry thead="no"><para>47</para>
</entry><entry thead="no"><para>46</para>
</entry><entry thead="no"><para>45</para>
</entry><entry thead="no"><para>44</para>
</entry><entry thead="no"><para>43</para>
</entry><entry thead="no"><para>42</para>
</entry><entry thead="no"><para>41</para>
</entry><entry thead="no"><para>40 </para>
</entry><entry thead="no"><para>39</para>
</entry><entry thead="no"><para>38</para>
</entry><entry thead="no"><para>37</para>
</entry><entry thead="no"><para>36</para>
</entry><entry thead="no"><para>35</para>
</entry><entry thead="no"><para>34</para>
</entry><entry thead="no"><para>33</para>
</entry><entry thead="no"><para>32  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>OPTVERR</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>RDERR</computeroutput> </para>
</entry><entry thead="no" colspan="4"><para></para>
</entry><entry thead="no"><para><computeroutput>FASTERR</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>MISSERR</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>PGSERR</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>SIZERR</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>PGAERR</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>WRPERR</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>PROGERR</computeroutput> </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para><computeroutput>OPERR</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>EOP</computeroutput>  </para>
</entry></row>
<row>
<entry thead="no"><para>31</para>
</entry><entry thead="no"><para>30</para>
</entry><entry thead="no"><para>29</para>
</entry><entry thead="no"><para>28</para>
</entry><entry thead="no"><para>27</para>
</entry><entry thead="no"><para>26</para>
</entry><entry thead="no"><para>25</para>
</entry><entry thead="no"><para>24 </para>
</entry><entry thead="no"><para>23</para>
</entry><entry thead="no"><para>22</para>
</entry><entry thead="no"><para>21</para>
</entry><entry thead="no"><para>20</para>
</entry><entry thead="no"><para>19</para>
</entry><entry thead="no"><para>18</para>
</entry><entry thead="no"><para>17</para>
</entry><entry thead="no"><para>16  </para>
</entry></row>
<row>
<entry thead="no" colspan="16"><para><computeroutput>BOOT_STATE_KEY[23:8]</computeroutput>  </para>
</entry></row>
<row>
<entry thead="no"><para>15</para>
</entry><entry thead="no"><para>14</para>
</entry><entry thead="no"><para>13</para>
</entry><entry thead="no"><para>12</para>
</entry><entry thead="no"><para>11</para>
</entry><entry thead="no"><para>10</para>
</entry><entry thead="no"><para>9</para>
</entry><entry thead="no"><para>8 </para>
</entry><entry thead="no"><para>7</para>
</entry><entry thead="no"><para>6</para>
</entry><entry thead="no"><para>5</para>
</entry><entry thead="no"><para>4</para>
</entry><entry thead="no"><para>3</para>
</entry><entry thead="no"><para>2</para>
</entry><entry thead="no"><para>1</para>
</entry><entry thead="no"><para>0  </para>
</entry></row>
<row>
<entry thead="no" colspan="8"><para><computeroutput>BOOT_STATE_KEY[7:0]</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>ERROR</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>NB_ERROR</computeroutput> </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para><computeroutput>ENTER</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>VERIFIED</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>SOFT_SWITCHED</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>VERIFY_SOFT_SWITCH</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>VERIFY</computeroutput>  </para>
</entry></row>
</table>
<itemizedlist>
<listitem><para><computeroutput>STATUS[7:0]</computeroutput>: Status code <table rows="6" cols="2"><row>
<entry thead="no"><para>0</para>
</entry><entry thead="no"><para>No error </para>
</entry></row>
<row>
<entry thead="no"><para>1</para>
</entry><entry thead="no"><para>Address out of range </para>
</entry></row>
<row>
<entry thead="no"><para>2</para>
</entry><entry thead="no"><para>Error while erasing </para>
</entry></row>
<row>
<entry thead="no"><para>3</para>
</entry><entry thead="no"><para>Error while programming </para>
</entry></row>
<row>
<entry thead="no"><para>4</para>
</entry><entry thead="no"><para>Boot state error </para>
</entry></row>
<row>
<entry thead="no"><para>5</para>
</entry><entry thead="no"><para>Write from non-booting bank </para>
</entry></row>
</table>
</para>
</listitem><listitem><para><computeroutput>BFB2</computeroutput>: <computeroutput>BFB2</computeroutput> bit from the option byte register. Indicates which bank the chip will boot from</para>
</listitem><listitem><para><computeroutput>MEMRMP</computeroutput>: <computeroutput>MEMRMP</computeroutput> bit from the memory remap register. Indicates which bank is currently running</para>
</listitem><listitem><para>Next two bytes contain the lowest two bytes of <computeroutput>FLASH_SR</computeroutput></para>
</listitem><listitem><para>Next three bytes contain the boot key, which should be 0xABCDEF</para>
</listitem><listitem><para>Bits 7 through 0 contain the boot state.</para>
</listitem><listitem><para><computeroutput>ERROR</computeroutput>: Indicates a state error occurred in the booting bank</para>
</listitem><listitem><para><computeroutput>NB_ERROR</computeroutput>: Indicates a state error occurred in the non-booting bank</para>
</listitem><listitem><para><computeroutput>ENTER</computeroutput>: Indicates that the program should enter the bootloader after the next reset</para>
</listitem><listitem><para><computeroutput>VERIFIED</computeroutput>: Indicates that the program in the non-booting bank has been verified. If this bit is set, the banks can be swapped</para>
</listitem><listitem><para><computeroutput>SOFT_SWITCHED</computeroutput>: Indicates that the soft switching succeeded</para>
</listitem><listitem><para><computeroutput>VERIFY_SOFT_SWITCH</computeroutput>: Indicates that the signal to soft switch has been processed by the boot state machine in the booting bank</para>
</listitem><listitem><para><computeroutput>VERIFY</computeroutput>: Indicates that the chip should soft switch after the next reset</para>
</listitem></itemizedlist>
</para>
</sect2></sect1>
<sect1 id="boot_8c_1autotoc_md4_1s1"><sect2 id="boot_8c_1autotoc_md4">
<title>Components</title><para>The bootloader consists of four main components: the startup script, the boot state machine, the <ref refid="boot_8c_1a17df2565b3ec70a6a540f71a38bc4cdc" kindref="member">core_boot_init()</ref> function, and an entry point.</para>
<sect3 id="boot_8c_1autotoc_md5">
<title>Startup script</title><para>For the bootloader to work, the default startup script must be replaced by the startup script startup_stm32g473xx.s. The startup script defines the interrupt handlers for the program, including the reset handler. By default, the reset handler initializes the stack and jumps to the application code. The modified startup script required for the bootloader also runs the boot state machine before performing any additional initialization.</para>
</sect3>
<sect3 id="boot_8c_1autotoc_md6">
<title>Boot state machine</title><para>The boot state machine runs before any other code and updates the boot state or soft swaps as necessary. The BSM first checks the nature of the reset. If the reset was caused externally (by pulling the nRST pin low), then the state is reset to NORMAL and the BSM continues to the application code.</para>
<para>The behavior of the BSM depends on whether it is running in the booting or non-booting banks. In the booting bank, the BSM will change the state to VERIFY_SOFT_SWAP and soft-swap if the state is VERIFY and continue to application code otherwise.</para>
<para>In the non-booting bank, the BSM will change the state to SOFT_SWITCHED if the state is VERIFY_SOFT_SWAP. Otherwise, the BSM will set the NB_ERROR bit and reset. This causes the chip to return to the booting bank.</para>
<para><image type="html" name="boot_state_machine.svg"></image>
</para>
</sect3>
<sect3 id="boot_8c_1autotoc_md7">
<title>core_boot_init()</title><para>The <ref refid="boot_8c_1a17df2565b3ec70a6a540f71a38bc4cdc" kindref="member">core_boot_init()</ref> function is called by application code after the clocks, GPIO, and FDCAN modules needed for the bootloader have been initialized. This function initializes the RX filter for the board&apos;s bootloader ID. The function also checks the boot state and enters the bootloader if necessary. See the state diagram above for details.</para>
</sect3>
<sect3 id="boot_8c_1autotoc_md8">
<title>Entry point</title><para>The software enters the bootloader by calling <ref refid="boot_8c_1ab2be0dfac3cabc71734c82636d313d87" kindref="member">core_boot_reset_and_enter()</ref>. The FDCAN RX interrupt hander in <ref refid="can_8c" kindref="compound">can.c</ref> will automatically call this function if it receives a packet addressed to its bootloader FDCAN ID containing the command to enter the bootloader </para>
</sect3>
</sect2></sect1>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;usart.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gpio.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;clock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;can.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;error_handler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;core_config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stm32g4xx_hal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOTSTATE<sp/>__attribute__<sp/>((section<sp/>(&quot;.bootstate&quot;)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOTPROGNAME<sp/>__attribute__<sp/>((section<sp/>(&quot;.progname&quot;)))<sp/>__attribute__<sp/>((__used__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALTBANK_BASE<sp/>0x08040000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>BOOTPROGNAME<sp/>progname[32]<sp/>=<sp/>PROGRAM_NAME_STRING;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">uint32_t<sp/>BOOTSTATE<sp/>boot_state;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stores<sp/>the<sp/>opcodes<sp/>used<sp/>for<sp/>soft<sp/>bank<sp/>switching.<sp/>Soft<sp/>bank<sp/>switching<sp/>must<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>performed<sp/>from<sp/>RAM,<sp/>since<sp/>the<sp/>code<sp/>in<sp/>the<sp/>other<sp/>bank<sp/>may<sp/>continue<sp/>from<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>different<sp/>address.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">uint32_t<sp/>boot_toggle[8];</highlight></codeline>
<codeline lineno="258"><highlight class="normal">uint32_t<sp/>boot_reset_state;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>page_erased[4];</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>address;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>id;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>databuf[100];</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FDCAN_HandleTypeDef<sp/>*hfdcan;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_STATE_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xABCDEF00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_STATE_NORMAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_STATE_VERIFY<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x01</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_STATE_VERIFY_SOFT_SWITCH<sp/>0x02</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_STATE_SOFT_SWITCHED<sp/>0x04</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_STATE_VERIFIED<sp/><sp/><sp/><sp/><sp/>0x08</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_STATE_ENTER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_STATE_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_STATE_NB_ERROR<sp/><sp/><sp/><sp/><sp/>0x40</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_STATUS_OK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_STATUS_INVALID_ADDRESS<sp/>0x01</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_STATUS_ERASE_ERROR<sp/>0x02</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_STATUS_PROG_ERROR<sp/><sp/>0x03</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_STATUS_STATE_ERROR<sp/>0x04</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_STATUS_NB_ERROR<sp/><sp/><sp/><sp/>0x05</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_OPCODE_RESET<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_OPCODE_SOFTSWAP<sp/><sp/><sp/><sp/>0x01</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_OPCODE_VERIFY<sp/><sp/><sp/><sp/><sp/><sp/>0x02</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_OPCODE_HARDSWAP<sp/><sp/><sp/><sp/>0x03</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="boot_8c_1a8422dff7830d6235171228d40177a36f" kindref="member">boot_soft_toggle</ref>();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="boot_8c_1a7c6ce3603114a5cb4c56d3c85cdce927" kindref="member">boot_reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>reset<sp/>flags<sp/>from<sp/>previous<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>RCC-&gt;CSR<sp/>|=<sp/>0x00800000;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>SCB-&gt;AIRCR<sp/><sp/>=<sp/>(SCB-&gt;AIRCR<sp/>&amp;<sp/>(0x700))<sp/>|<sp/>0x05fa0004;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>__DSB();</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal">uint32_t<sp/><ref refid="boot_8c_1a57516d5955e696bf83e2915c7a8d1857" kindref="member">check_nonbooting</ref>()<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((FLASH-&gt;OPTR<sp/>&gt;&gt;<sp/>20)<sp/>^<sp/>(SYSCFG-&gt;MEMRMP<sp/>&gt;&gt;<sp/>8))<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="boot_8c_1a8ede44e2fb3943e5c88c0b87d17c1755" kindref="member">boot_state_machine</ref>()<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>__HAL_RCC_SYSCFG_CLK_ENABLE();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>rst<sp/>=<sp/>RCC-&gt;CSR;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>SCB-&gt;VTOR<sp/>=<sp/>0x08000000;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>boot_reset_state<sp/>=<sp/>rst;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>RCC-&gt;CSR<sp/>=<sp/>rst<sp/>|<sp/>0x00800000;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>all<sp/>reset<sp/>flags<sp/>are<sp/>cleared,<sp/>then<sp/>a<sp/>software<sp/>reset<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>occurred<sp/>but<sp/>has<sp/>already<sp/>been<sp/>handled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(rst<sp/>&amp;<sp/>0xfe000000))<sp/>rst<sp/>|=<sp/>RCC_CSR_SFTRSTF;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rst<sp/>&amp;<sp/>RCC_CSR_BORRSTF)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Power-on<sp/>reset<sp/>detected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>=<sp/>BOOT_STATE_KEY<sp/>|<sp/>BOOT_STATE_NORMAL;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rst<sp/>&amp;<sp/>(RCC_CSR_SFTRSTF<sp/>|<sp/>RCC_CSR_OBLRSTF))<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Internal<sp/>reset<sp/>or<sp/>option<sp/>byte<sp/>reload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bankmode<sp/>=<sp/>0<sp/>if<sp/>booting<sp/>bank<sp/>mapped<sp/>at<sp/>address<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>if<sp/>non-booting<sp/>bank<sp/>is<sp/>mapped<sp/>at<sp/>address<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="boot_8c_1a57516d5955e696bf83e2915c7a8d1857" kindref="member">check_nonbooting</ref>())<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-booting<sp/>bank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((boot_state<sp/>&amp;<sp/>0xffffff00)<sp/>!=<sp/>BOOT_STATE_KEY)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Boot<sp/>state<sp/>register<sp/>probably<sp/>does<sp/>not<sp/>contain<sp/>the<sp/>boot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state<sp/>(address<sp/>mismatch?),<sp/>reset<sp/>to<sp/>indicate<sp/>soft<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>switch<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="boot_8c_1a7c6ce3603114a5cb4c56d3c85cdce927" kindref="member">boot_reset</ref>();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>ENTER<sp/>bit<sp/>is<sp/>set,<sp/>it<sp/>must<sp/>be<sp/>preserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((boot_state<sp/>&amp;<sp/>0xff<sp/>&amp;<sp/>(~BOOT_STATE_ENTER))<sp/>==<sp/>BOOT_STATE_VERIFY_SOFT_SWITCH)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>state<sp/>and<sp/>no<sp/>errors,<sp/>continue<sp/>to<sp/>code<sp/>for<sp/>verification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>=<sp/>BOOT_STATE_KEY<sp/>|<sp/>BOOT_STATE_SOFT_SWITCHED<sp/>|<sp/>(boot_state<sp/>&amp;<sp/>BOOT_STATE_ENTER);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bad<sp/>state,<sp/>raise<sp/>error<sp/>and<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>|=<sp/>BOOT_STATE_NB_ERROR;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="boot_8c_1a7c6ce3603114a5cb4c56d3c85cdce927" kindref="member">boot_reset</ref>();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Booting<sp/>bank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((boot_state<sp/>&amp;<sp/>0xffffff00)<sp/>!=<sp/>BOOT_STATE_KEY)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Boot<sp/>state<sp/>has<sp/>not<sp/>been<sp/>initialized<sp/>or<sp/>has<sp/>changed<sp/>location.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Continue<sp/>to<sp/>main<sp/>code<sp/>and<sp/>the<sp/>bootloader<sp/>will<sp/>produce<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error<sp/>message<sp/>and<sp/>change<sp/>the<sp/>boot<sp/>state<sp/>to<sp/>NORMAL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boot_state<sp/>&amp;<sp/>(BOOT_STATE_NB_ERROR<sp/>|<sp/>BOOT_STATE_ERROR))<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>error<sp/>was<sp/>reported,<sp/>continue<sp/>to<sp/>main<sp/>code<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bootloader<sp/>will<sp/>produce<sp/>an<sp/>error<sp/>message<sp/>and<sp/>change<sp/>the<sp/>boot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state<sp/>to<sp/>NORMAL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(boot_state<sp/>&amp;<sp/>0x0f)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BOOT_STATE_NORMAL:</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BOOT_STATE_ENTER:</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BOOT_STATE_VERIFY:</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Soft<sp/>bank<sp/>switching<sp/>can<sp/>only<sp/>occur<sp/>when<sp/>there<sp/>are<sp/>no<sp/>errors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>=<sp/>(boot_state<sp/>&amp;<sp/>0xfffffff0)<sp/>|<sp/>BOOT_STATE_VERIFY_SOFT_SWITCH;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="boot_8c_1a8422dff7830d6235171228d40177a36f" kindref="member">boot_soft_toggle</ref>();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>boot<sp/>state<sp/>is<sp/>not<sp/>in<sp/>one<sp/>of<sp/>the<sp/>expected<sp/>states,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>error<sp/>flag<sp/>and<sp/>continue<sp/>to<sp/>main<sp/>code.<sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bootloader<sp/>will<sp/>transmit<sp/>an<sp/>error<sp/>message<sp/>and<sp/>reset<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>boot<sp/>state<sp/>to<sp/>NORMAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>|=<sp/>BOOT_STATE_ERROR;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>External<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>=<sp/>BOOT_STATE_KEY<sp/>|<sp/>BOOT_STATE_NORMAL;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>boot_bankswap()<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlock<sp/>the<sp/>flash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>FLASH-&gt;KEYR<sp/>=<sp/>0x45670123;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>FLASH-&gt;KEYR<sp/>=<sp/>0xCDEF89AB;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlock<sp/>the<sp/>option<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>FLASH-&gt;OPTKEYR<sp/>=<sp/>0x08192A3B;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>FLASH-&gt;OPTKEYR<sp/>=<sp/>0x4C5D6E7F;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(FLASH-&gt;SR<sp/>&amp;<sp/>FLASH_SR_BSY);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>FLASH-&gt;OPTR<sp/>^=<sp/>FLASH_OPTR_BFB2;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>FLASH-&gt;CR<sp/>=<sp/>FLASH_CR_OPTSTRT;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(FLASH-&gt;SR<sp/>&amp;<sp/>FLASH_SR_BSY);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>FLASH-&gt;CR<sp/>=<sp/>FLASH_CR_OBL_LAUNCH;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>__DSB();</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>boot_transmit_can(uint8_t<sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_data)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>tx_id;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_id<sp/>=<sp/>(CORE_BOOT_FDCAN_MASTER_ID<sp/>&lt;&lt;<sp/>18)<sp/>|<sp/>(1&lt;&lt;17)<sp/>|<sp/>address;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_data)<sp/>tx_id<sp/>|=<sp/>(1&lt;&lt;16);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;<sp/>64)<sp/>length<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((length<sp/>&gt;=<sp/>32)<sp/>&amp;&amp;<sp/>(length<sp/>&amp;<sp/>8))<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tx_id<sp/>|=<sp/>(1&lt;&lt;15);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>core_CAN_send_fd_message(CORE_BOOT_FDCAN,<sp/>tx_id,<sp/>length,<sp/>databuf);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((CORE_BOOT_FDCAN-&gt;PSR<sp/>&amp;<sp/>0x18)<sp/>==<sp/>0x18);</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>boot_transmit_status(uint8_t<sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>address<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>databuf[0]<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>0:<sp/>remap<sp/>status<sp/>(which<sp/>bank<sp/>the<sp/>code<sp/>runs<sp/>on)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>1:<sp/>BFB2<sp/>(which<sp/>bank<sp/>the<sp/>chip<sp/>boots<sp/>from)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>databuf[1]<sp/>=<sp/>((FLASH-&gt;OPTR<sp/>&gt;&gt;<sp/>19)<sp/>&amp;<sp/>2)<sp/>|<sp/>((SYSCFG-&gt;MEMRMP<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>databuf[2]<sp/>=<sp/>(FLASH-&gt;SR)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>databuf[3]<sp/>=<sp/>(FLASH-&gt;SR<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(databuf+4,<sp/>&amp;boot_state,<sp/>4);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>boot_transmit_can(8,<sp/>0);</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>boot_await_data()<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(CORE_BOOT_FDCAN-&gt;RXF0S<sp/>&amp;<sp/>FDCAN_RXF0S_F0FL));</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>received<sp/>over<sp/>CAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>FDCAN_RxHeaderTypeDef<sp/>head;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_FDCAN_GetRxMessage(hfdcan,<sp/>FDCAN_RX_FIFO0,<sp/>&amp;head,<sp/>databuf);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>head.Identifier;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>length<sp/>=<sp/>core_CAN_dlc_lookup[head.DataLength];</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>is<sp/>the<sp/>only<sp/>opcode<sp/>that<sp/>can<sp/>be<sp/>executed<sp/>using<sp/>the<sp/>broadcast<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&amp;<sp/>(1&lt;&lt;17)))<sp/>&amp;&amp;<sp/>(databuf[0]<sp/>==<sp/>BOOT_OPCODE_RESET)<sp/>&amp;&amp;<sp/>(((</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;&gt;<sp/>18)<sp/>==<sp/>CORE_BOOT_FDCAN_ID)<sp/>||<sp/>((</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;&gt;<sp/>18)<sp/>==<sp/>CORE_BOOT_FDCAN_BROADCAST_ID)))<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>=<sp/>BOOT_STATE_KEY<sp/>|<sp/>BOOT_STATE_NORMAL;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="boot_8c_1a7c6ce3603114a5cb4c56d3c85cdce927" kindref="member">boot_reset</ref>();</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;&gt;<sp/>18)<sp/>!=<sp/>CORE_BOOT_FDCAN_ID)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&amp;<sp/>(1&lt;&lt;17))<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&amp;<sp/>(1&lt;&lt;15))<sp/>length<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address<sp/>=<sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&amp;<sp/>0x7fff)<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Control<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(databuf[0]<sp/>==<sp/>BOOT_OPCODE_RESET)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>=<sp/>BOOT_STATE_KEY<sp/>|<sp/>BOOT_STATE_NORMAL;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="boot_8c_1a7c6ce3603114a5cb4c56d3c85cdce927" kindref="member">boot_reset</ref>();</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(databuf[0]<sp/>==<sp/>BOOT_OPCODE_SOFTSWAP)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Failsafe<sp/>bank<sp/>swap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>=<sp/>BOOT_STATE_KEY<sp/>|<sp/>BOOT_STATE_VERIFY;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="boot_8c_1a7c6ce3603114a5cb4c56d3c85cdce927" kindref="member">boot_reset</ref>();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(databuf[0]<sp/>==<sp/>BOOT_OPCODE_VERIFY)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verification<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boot_state<sp/>==<sp/>(BOOT_STATE_KEY<sp/>|<sp/>BOOT_STATE_SOFT_SWITCHED))<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>=<sp/>BOOT_STATE_KEY<sp/>|<sp/>BOOT_STATE_VERIFIED;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>=<sp/>BOOT_STATE_KEY<sp/>|<sp/>BOOT_STATE_NB_ERROR;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_transmit_status(0);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(databuf[0]<sp/>==<sp/>BOOT_OPCODE_HARDSWAP)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>program<sp/>is<sp/>verified,<sp/>swap<sp/>the<sp/>banks,<sp/>set<sp/>state<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NORMAL,<sp/>and<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="boot_8c_1a57516d5955e696bf83e2915c7a8d1857" kindref="member">check_nonbooting</ref>())<sp/>&amp;&amp;<sp/>(boot_state<sp/>==<sp/>(BOOT_STATE_KEY<sp/>|<sp/>BOOT_STATE_VERIFIED)))<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>=<sp/>BOOT_STATE_KEY<sp/>|<sp/>BOOT_STATE_NORMAL;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_transmit_status(0);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_bankswap();</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_transmit_status(4);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>=<sp/>BOOT_STATE_KEY<sp/>|<sp/>BOOT_STATE_NORMAL;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int8_t<sp/>boot_program_and_verify(uint8_t<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>length<sp/>is<sp/>not<sp/>doubleword-aligned,<sp/>return<sp/>0<sp/>(error).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&amp;<sp/>0x07)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-BOOT_STATUS_INVALID_ADDRESS;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>address<sp/>is<sp/>not<sp/>doubleword-aligned,<sp/>return<sp/>0<sp/>(error).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(address<sp/>&amp;<sp/>0x07)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-BOOT_STATUS_INVALID_ADDRESS;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>the<sp/>target<sp/>section<sp/>overlaps<sp/>with<sp/>bootloader<sp/>code,<sp/>return<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>empty<sp/>echo<sp/>frame<sp/>will<sp/>be<sp/>transmitted,<sp/>indicating<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(address<sp/>+<sp/>length<sp/>&gt;<sp/>0x40000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-BOOT_STATUS_INVALID_ADDRESS;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>length;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlock<sp/>the<sp/>flash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>FLASH-&gt;KEYR<sp/>=<sp/>0x45670123;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>FLASH-&gt;KEYR<sp/>=<sp/>0xCDEF89AB;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>page;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FLASH-&gt;OPTR<sp/>&amp;<sp/>FLASH_OPTR_DBANK)<sp/>page<sp/>=<sp/>address<sp/>&gt;&gt;<sp/>11;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>page<sp/>=<sp/>(address<sp/>&gt;&gt;<sp/>12)<sp/>&amp;<sp/>0x7f;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(FLASH-&gt;SR<sp/>&amp;<sp/>FLASH_SR_BSY);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!((page_erased[page&gt;&gt;5]&gt;&gt;(page<sp/>&amp;<sp/>0x1f))<sp/>&amp;<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Page<sp/>has<sp/>not<sp/>been<sp/>erased,<sp/>so<sp/>erase<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>error<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLASH-&gt;SR<sp/>=<sp/>FLASH-&gt;SR<sp/>&amp;<sp/>0xffff;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Erase<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLASH-&gt;CR<sp/>=<sp/>((page<sp/>&amp;<sp/>0x7f)<sp/>&lt;&lt;<sp/>FLASH_CR_PNB_Pos)<sp/>|<sp/>FLASH_CR_PER<sp/>|<sp/>((SYSCFG-&gt;MEMRMP<sp/>&amp;<sp/>(1&lt;&lt;8))<sp/>?<sp/>0<sp/>:<sp/>FLASH_CR_BKER);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLASH-&gt;CR<sp/>|=<sp/>FLASH_CR_STRT;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>page_erased[page&gt;&gt;5]<sp/>|=<sp/>1&lt;&lt;(page<sp/>&amp;<sp/>0x1f);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(FLASH-&gt;SR<sp/>&amp;<sp/>FLASH_SR_BSY);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error<sp/>while<sp/>erasing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FLASH-&gt;SR<sp/>&amp;<sp/>0xfffe)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-BOOT_STATUS_ERASE_ERROR;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>FLASH-&gt;CR<sp/>=<sp/>FLASH_CR_PG;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>temp;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>error<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLASH-&gt;SR<sp/>=<sp/>FLASH-&gt;SR<sp/>&amp;<sp/>0xffff;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>((uint64_t*)(databuf+i))[0];</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Program<sp/>the<sp/>doubleword</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(uint32_t*)(ALTBANK_BASE<sp/>+<sp/>address+i)<sp/>=<sp/>(uint32_t)temp;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ISB();</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(uint32_t*)(ALTBANK_BASE<sp/>+<sp/>address+i+4)<sp/>=<sp/>(uint32_t)(temp<sp/>&gt;&gt;<sp/>32);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(FLASH-&gt;SR<sp/>&amp;<sp/>FLASH_SR_BSY);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>0<sp/>if<sp/>an<sp/>error<sp/>occurred</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FLASH-&gt;SR<sp/>&amp;<sp/>0xfffe)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-BOOT_STATUS_PROG_ERROR;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>FLASH-&gt;CR<sp/>=<sp/>FLASH_CR_LOCK;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>databuf[i]<sp/>=<sp/>*(uint8_t*)(ALTBANK_BASE<sp/>+<sp/>address+i);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>boot()<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcore___c_a_n__module__s" kindref="compound">core_CAN_module_t</ref><sp/>*p_can<sp/>=<sp/>core_CAN_convert(CORE_BOOT_FDCAN);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>hfdcan<sp/>=<sp/>&amp;(p_can-&gt;hfdcan);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//core_CAN_add_filter(CORE_BOOT_FDCAN,<sp/>1,<sp/>(CORE_BOOT_FDCAN_ID<sp/>&lt;&lt;<sp/>18),<sp/>((CORE_BOOT_FDCAN_ID+1)<sp/>&lt;&lt;<sp/>18)-1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>boot_transmit_status(0);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i++)<sp/>page_erased[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Main<sp/>programming<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>int8_t<sp/>ndata<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>address<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>bankmode<sp/>=<sp/><ref refid="boot_8c_1a57516d5955e696bf83e2915c7a8d1857" kindref="member">check_nonbooting</ref>();</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ndata<sp/>=<sp/>boot_await_data();</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&amp;<sp/>(1&lt;&lt;16))<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ndata<sp/>=<sp/>databuf[0];</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bank<sp/>=<sp/>databuf[1];</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>ndata;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>databuf[i]<sp/>=<sp/>*(uint8_t*)((bank<sp/>?<sp/>ALTBANK_BASE<sp/>:<sp/>0)<sp/>+<sp/>address+i);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_transmit_can(ndata,<sp/>1);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>data<sp/>only<sp/>if<sp/>the<sp/>ID<sp/>is<sp/>equal<sp/>to<sp/>the<sp/>boot<sp/>ID<sp/>(rather<sp/>than<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>broadcast<sp/>ID)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ndata<sp/>&amp;&amp;<sp/>(((</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;&gt;<sp/>18)<sp/>&amp;<sp/>0x7ff)<sp/>==<sp/>CORE_BOOT_FDCAN_ID))<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bankmode)<sp/>boot_transmit_status(BOOT_STATUS_NB_ERROR);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ndata<sp/>=<sp/>boot_program_and_verify(ndata);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ndata<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_transmit_can(ndata,<sp/>1);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_GPIO_toggle_heartbeat();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>boot_transmit_status(-ndata);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="boot_8c_1ab2be0dfac3cabc71734c82636d313d87" kindref="member">core_boot_reset_and_enter</ref>()<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="boot_8c_1a57516d5955e696bf83e2915c7a8d1857" kindref="member">check_nonbooting</ref>())<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boot_state<sp/>==<sp/>(BOOT_STATE_KEY<sp/>|<sp/>BOOT_STATE_SOFT_SWITCHED))<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>=<sp/>BOOT_STATE_KEY<sp/>|<sp/>BOOT_STATE_ENTER<sp/>|<sp/>BOOT_STATE_VERIFY;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((boot_state<sp/>&amp;<sp/>0xffffff00)<sp/>==<sp/>BOOT_STATE_KEY)<sp/>boot_state<sp/>|=<sp/>BOOT_STATE_NB_ERROR;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>boot<sp/>state<sp/>key<sp/>is<sp/>not<sp/>valid,<sp/>then<sp/>the<sp/>boot<sp/>state<sp/>machine<sp/>did</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>run<sp/>and<sp/>the<sp/>boot_state<sp/>variable<sp/>points<sp/>to<sp/>the<sp/>wrong<sp/>location.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>to<sp/>the<sp/>booting<sp/>bank,<sp/>which<sp/>will<sp/>see<sp/>that<sp/>the<sp/>state<sp/>is<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>VERIFY_SOFT_SWITCH<sp/>and<sp/>raise<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boot_state<sp/>==<sp/>(BOOT_STATE_KEY<sp/>|<sp/>BOOT_STATE_NORMAL))<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>=<sp/>BOOT_STATE_KEY<sp/>|<sp/>BOOT_STATE_ENTER;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>boot_state<sp/>|=<sp/>BOOT_STATE_ERROR;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="boot_8c_1a7c6ce3603114a5cb4c56d3c85cdce927" kindref="member">boot_reset</ref>();</highlight></codeline>
<codeline lineno="614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="boot_8c_1a17df2565b3ec70a6a540f71a38bc4cdc" kindref="member">core_boot_init</ref>()<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>device<sp/>listens<sp/>for<sp/>its<sp/>boot<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>core_CAN_add_filter(CORE_BOOT_FDCAN,<sp/>1,<sp/>(CORE_BOOT_FDCAN_ID<sp/>&lt;&lt;<sp/>18),<sp/>((CORE_BOOT_FDCAN_ID+1)<sp/>&lt;&lt;<sp/>18)-1);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>core_CAN_add_filter(CORE_BOOT_FDCAN,<sp/>1,<sp/>(0x7ff<sp/>&lt;&lt;<sp/>18),<sp/>0x1fffffff);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//boot_transmit_status(21);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>(int<sp/>i=0;<sp/>i<sp/>&lt;<sp/>200000;<sp/>i++);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="boot_8c_1a57516d5955e696bf83e2915c7a8d1857" kindref="member">check_nonbooting</ref>())<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((boot_state<sp/>&amp;<sp/>0xffffff00)<sp/>!=<sp/>BOOT_STATE_KEY)<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Boot<sp/>state<sp/>key<sp/>is<sp/>invalid.<sp/>This<sp/>will<sp/>only<sp/>happen<sp/>if<sp/>the<sp/>boot<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state<sp/>machine<sp/>does<sp/>not<sp/>run<sp/>and<sp/>if<sp/>the<sp/>boot_state<sp/>variable<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>wrong<sp/>location.<sp/>Return<sp/>to<sp/>the<sp/>booting<sp/>bank,<sp/>which<sp/>will<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>that<sp/>the<sp/>state<sp/>is<sp/>VERIFY_SOFT_SWITCH<sp/>and<sp/>raise<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="boot_8c_1a7c6ce3603114a5cb4c56d3c85cdce927" kindref="member">boot_reset</ref>();</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((boot_state<sp/>&amp;<sp/>0x0000000f)<sp/>!=<sp/>BOOT_STATE_SOFT_SWITCHED)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>state,<sp/>likely<sp/>because<sp/>the<sp/>boot<sp/>state<sp/>machine<sp/>was<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run.<sp/>Set<sp/>the<sp/>NB_ERROR<sp/>flag<sp/>and<sp/>reset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>|=<sp/>BOOT_STATE_NB_ERROR;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="boot_8c_1a7c6ce3603114a5cb4c56d3c85cdce927" kindref="member">boot_reset</ref>();</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Soft<sp/>switching<sp/>can<sp/>only<sp/>occur<sp/>if<sp/>there<sp/>are<sp/>no<sp/>errors.<sp/>If<sp/>the<sp/>boot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state<sp/>machine<sp/>in<sp/>the<sp/>non-booting<sp/>bank<sp/>sees<sp/>an<sp/>error,<sp/>a<sp/>reset<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>triggered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((boot_state<sp/>&amp;<sp/>0xffffff00)<sp/>!=<sp/>BOOT_STATE_KEY)<sp/>||<sp/>(boot_state<sp/>&amp;<sp/>BOOT_STATE_ERROR))<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>error<sp/>was<sp/>reported<sp/>or<sp/>the<sp/>boot<sp/>state<sp/>key<sp/>is<sp/>not<sp/>valid,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transmit<sp/>an<sp/>error<sp/>message<sp/>on<sp/>CAN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_transmit_status(BOOT_STATUS_STATE_ERROR);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>=<sp/>BOOT_STATE_KEY<sp/>|<sp/>BOOT_STATE_NORMAL;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((boot_state<sp/>&amp;<sp/>0xffffff00)<sp/>==<sp/>BOOT_STATE_KEY)<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boot_state<sp/>&amp;<sp/>BOOT_STATE_ENTER)<sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>&amp;=<sp/>~BOOT_STATE_ENTER;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__disable_irq();</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot();</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>__enable_irq();</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="boot_8c_1a57516d5955e696bf83e2915c7a8d1857" kindref="member">check_nonbooting</ref>())<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boot_state<sp/>=<sp/>BOOT_STATE_KEY<sp/>|<sp/>BOOT_STATE_NORMAL;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/driver/Src/boot.c"/>
  </compounddef>
</doxygen>
