<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="can_8h" kind="file" language="C++">
    <compoundname>can.h</compoundname>
    <includes refid="clock_8h" local="yes">clock.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="yes">FreeRTOS.h</includes>
    <includes local="yes">queue.h</includes>
    <includes local="yes">semphr.h</includes>
    <includedby refid="boot_8c" local="yes">/home/matthias/racing/core/src/driver/Src/boot.c</includedby>
    <includedby refid="can_8c" local="yes">/home/matthias/racing/core/src/driver/Src/can.c</includedby>
    <incdepgraph>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>queue.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>clock.h</label>
        <link refid="clock_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>semphr.h</label>
      </node>
      <node id="6">
        <label>FreeRTOS.h</label>
      </node>
      <node id="1">
        <label>/home/matthias/racing/core/src/driver/Inc/can.h</label>
        <link refid="can_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stm32g4xx_hal.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/matthias/racing/core/src/driver/Src/boot.c</label>
        <link refid="boot_8c"/>
      </node>
      <node id="1">
        <label>/home/matthias/racing/core/src/driver/Inc/can.h</label>
        <link refid="can_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/matthias/racing/core/src/driver/Src/can.c</label>
        <link refid="can_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structCanMessage__s" prot="public">CanMessage_s</innerclass>
    <innerclass refid="structCanExtendedMessage__s" prot="public">CanExtendedMessage_s</innerclass>
    <innerclass refid="structcore__CAN__module__s" prot="public">core_CAN_module_s</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="can_8h_1a420eece586ab021fe24f9d5c7e4993c0" prot="public" static="no">
        <type>struct <ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_s</ref></type>
        <definition>typedef struct core_CAN_module_s core_CAN_module_t</definition>
        <argsstring></argsstring>
        <name>core_CAN_module_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Inc/can.h" line="36" column="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="can_8h_1aa7200028243560e4cf59759da4d2e07d" prot="public" static="no" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t core_CAN_dlc_lookup[16]</definition>
        <argsstring>[16]</argsstring>
        <name>core_CAN_dlc_lookup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Inc/can.h" line="38" column="22" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="75" bodyend="-1" declfile="/home/matthias/racing/core/src/driver/Inc/can.h" declline="38" declcolumn="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="can_8h_1a437d464dc3674db8e5de6c14761815d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_CAN_init</definition>
        <argsstring>(FDCAN_GlobalTypeDef *fdcan)</argsstring>
        <name>core_CAN_init</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>fdcan</declname>
          <defname>can</defname>
        </param>
        <briefdescription>
<para>Initialize an FDCAN module, the RX and TX queues, and the RX and TX pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if the given FDCAN is not valid or the initialization failed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Inc/can.h" line="40" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="95" bodyend="244" declfile="/home/matthias/racing/core/src/driver/Inc/can.h" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="can_8h_1a9d930430affaebbd1fa5f9ac7e4d12f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref> *</type>
        <definition>core_CAN_module_t* core_CAN_convert</definition>
        <argsstring>(FDCAN_GlobalTypeDef *fdcan)</argsstring>
        <name>core_CAN_convert</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>fdcan</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Inc/can.h" line="41" column="19" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="82" bodyend="87" declfile="/home/matthias/racing/core/src/driver/Inc/can.h" declline="41" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="can_8h_1a84ba21a70b0eaa5a94ebfa9d80ce0834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_CAN_send_message</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can, uint32_t id, uint8_t dlc, uint64_t data)</argsstring>
        <name>core_CAN_send_message</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dlc</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Add a CAN message to the hardware FIFO. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>can</parametername>
</parameternamelist>
<parameterdescription>
<para>FDCAN module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the message to be transmitted. If this value is greater than 2047, then an extended ID is automatically selected. Only the lowest 29 bits are kept, so setting the MSB will force an extended ID even if the ID is less than or equal to 2047 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlc</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the packet (0-8) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data encoded as a uint64_t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if an error occurred while adding the message to the queue </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Inc/can.h" line="43" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="341" bodyend="359" declfile="/home/matthias/racing/core/src/driver/Inc/can.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="can_8h_1aec814b501cd9c108a515bcbb0e3bf4a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_CAN_send_fd_message</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can, uint32_t id, uint8_t dlc, uint8_t *data)</argsstring>
        <name>core_CAN_send_fd_message</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dlc</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Add an FDCAN message to the hardware FIFO. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>can</parametername>
</parameternamelist>
<parameterdescription>
<para>FDCAN module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the message to be transmitted. If this value is greater than 2047, then an extended ID is automatically selected. Only the lowest 29 bits are kept, so setting the MSB will force an extended ID even if the ID is less than or equal to 2047 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlc</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the packet. If the length does not correspond to a valid FDCAN packet length, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be transmitted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if an error occurred while adding the message to the queue </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Inc/can.h" line="44" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="374" bodyend="394" declfile="/home/matthias/racing/core/src/driver/Inc/can.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="can_8h_1ae0e18230790182107643e8c44d59646f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_CAN_add_message_to_tx_queue</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can, uint32_t id, uint8_t dlc, uint64_t data)</argsstring>
        <name>core_CAN_add_message_to_tx_queue</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dlc</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Add a CAN frame to the TX queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>can</parametername>
</parameternamelist>
<parameterdescription>
<para>FDCAN module for which the frame is being enqueued </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the CAN frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlc</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of data bytes in the CAN frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data bytes, encoded LSB-first as a uint64 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if the queue is full </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Inc/can.h" line="45" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="256" bodyend="270" declfile="/home/matthias/racing/core/src/driver/Inc/can.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="can_8h_1a78c43d4e3c5280d09a1bca37f9ba986f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_CAN_add_extended_message_to_tx_queue</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can, uint32_t id, uint8_t dlc, uint8_t *data)</argsstring>
        <name>core_CAN_add_extended_message_to_tx_queue</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dlc</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Add a CAN frame to the TX queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>can</parametername>
</parameternamelist>
<parameterdescription>
<para>FDCAN module for which the frame is being enqueued </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the CAN frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlc</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of data bytes in the CAN frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of data bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if the queue is full, if the FDCAN is not configured for FD operation, or if <computeroutput>dlc</computeroutput> &gt; 64 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Inc/can.h" line="46" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="282" bodyend="294" declfile="/home/matthias/racing/core/src/driver/Inc/can.h" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="can_8h_1a5956fa458e011f58d514fcfa3f45b72a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_CAN_send_from_tx_queue_task</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can)</argsstring>
        <name>core_CAN_send_from_tx_queue_task</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <briefdescription>
<para>Loop for sending data in the TX queue over CAN. This function must be run in its own task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>can</parametername>
</parameternamelist>
<parameterdescription>
<para>FDCAN module </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Inc/can.h" line="47" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="301" bodyend="326" declfile="/home/matthias/racing/core/src/driver/Inc/can.h" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="can_8h_1a5633bcdabb91aa4268b2b135a8ef21fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_CAN_receive_from_queue</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can, CanMessage_s *received_message)</argsstring>
        <name>core_CAN_receive_from_queue</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <param>
          <type><ref refid="structCanMessage__s" kindref="compound">CanMessage_s</ref> *</type>
          <declname>received_message</declname>
        </param>
        <briefdescription>
<para>If a frame is waiting in the RX queue, copy it to the given location. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>can</parametername>
</parameternamelist>
<parameterdescription>
<para>FDCAN module from which the frame is read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>received_message</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the location where the received frame would be stored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>if a frame was copied from the queue into the given location </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Inc/can.h" line="49" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="497" bodyend="505" declfile="/home/matthias/racing/core/src/driver/Inc/can.h" declline="49" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="can_8h_1a5abf7049ba56ae95525c7ef6b043c3fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_CAN_receive_extended_from_queue</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can, CanExtendedMessage_s *received_message)</argsstring>
        <name>core_CAN_receive_extended_from_queue</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <param>
          <type><ref refid="structCanExtendedMessage__s" kindref="compound">CanExtendedMessage_s</ref> *</type>
          <declname>received_message</declname>
        </param>
        <briefdescription>
<para>If a frame is waiting in the RX queue, copy it to the given location. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>can</parametername>
</parameternamelist>
<parameterdescription>
<para>FDCAN module from which the frame is read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>received_message</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the location where the received frame would be stored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>if a frame was copied from the queue into the given location </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Inc/can.h" line="50" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="479" bodyend="487" declfile="/home/matthias/racing/core/src/driver/Inc/can.h" declline="50" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="can_8h_1a2939ee64b45b67008f5769ba9d0f5f16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_CAN_add_filter</definition>
        <argsstring>(FDCAN_GlobalTypeDef *can, bool isExtended, uint32_t id1, uint32_t id2)</argsstring>
        <name>core_CAN_add_filter</name>
        <param>
          <type>FDCAN_GlobalTypeDef *</type>
          <declname>can</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isExtended</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id2</declname>
        </param>
        <briefdescription>
<para>Add an RX filter for the given FDCAN module. </para>
        </briefdescription>
        <detaileddescription>
<para>All frames with IDs greater than or equal to <computeroutput>id1</computeroutput> and less than or equal to <computeroutput>id2</computeroutput> will be placed in the RX queue <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>can</parametername>
</parameternamelist>
<parameterdescription>
<para>FDCAN module for which the filter should be created </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isExtended</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies whether the IDs are extended CAN IDs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id1</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound (inclusive) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id2</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bound (inclusive) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>if the filter was added successfully </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Inc/can.h" line="52" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/can.c" bodystart="524" bodyend="552" declfile="/home/matthias/racing/core/src/driver/Inc/can.h" declline="52" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;clock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;FreeRTOS.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;queue.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;semphr.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="structCanMessage__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dlc;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>data;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}<sp/><ref refid="structCanMessage__s" kindref="compound">CanMessage_s</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="structCanExtendedMessage__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dlc;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_fd;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>data[64];</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}<sp/><ref refid="structCanExtendedMessage__s" kindref="compound">CanExtendedMessage_s</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="structcore__CAN__module__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_s</ref><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>FDCAN_HandleTypeDef<sp/>hfdcan;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>QueueHandle_t<sp/>can_queue_rx;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>QueueHandle_t<sp/>can_queue_tx;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>SemaphoreHandle_t<sp/>can_tx_semaphore;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>fdcan_num_standard_filters;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>fdcan_num_extended_filters;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>autort;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>use_fd;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}<sp/><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>core_CAN_dlc_lookup[16];</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="can_8c_1af5a65d61181a7d9e50f8f42df8a73cf7" kindref="member">core_CAN_init</ref>(FDCAN_GlobalTypeDef<sp/>*fdcan);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="structcore__CAN__module__s" kindref="compound">core_CAN_module_t</ref><sp/>*core_CAN_convert(FDCAN_GlobalTypeDef<sp/>*fdcan);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a84ba21a70b0eaa5a94ebfa9d80ce0834" kindref="member">core_CAN_send_message</ref>(FDCAN_GlobalTypeDef<sp/>*can,<sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint8_t<sp/>dlc,<sp/>uint64_t<sp/>data);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="can_8c_1aec814b501cd9c108a515bcbb0e3bf4a4" kindref="member">core_CAN_send_fd_message</ref>(FDCAN_GlobalTypeDef<sp/>*can,<sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint8_t<sp/>dlc,<sp/>uint8_t<sp/>*data);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="can_8c_1ae0e18230790182107643e8c44d59646f" kindref="member">core_CAN_add_message_to_tx_queue</ref>(FDCAN_GlobalTypeDef<sp/>*can,<sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint8_t<sp/>dlc,<sp/>uint64_t<sp/>data);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a78c43d4e3c5280d09a1bca37f9ba986f" kindref="member">core_CAN_add_extended_message_to_tx_queue</ref>(FDCAN_GlobalTypeDef<sp/>*can,<sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint8_t<sp/>dlc,<sp/>uint8_t<sp/>*data);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a5956fa458e011f58d514fcfa3f45b72a" kindref="member">core_CAN_send_from_tx_queue_task</ref>(FDCAN_GlobalTypeDef<sp/>*can);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a5633bcdabb91aa4268b2b135a8ef21fe" kindref="member">core_CAN_receive_from_queue</ref>(FDCAN_GlobalTypeDef<sp/>*can,<sp/><ref refid="structCanMessage__s" kindref="compound">CanMessage_s</ref><sp/>*received_message);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a5abf7049ba56ae95525c7ef6b043c3fd" kindref="member">core_CAN_receive_extended_from_queue</ref>(FDCAN_GlobalTypeDef<sp/>*can,<sp/><ref refid="structCanExtendedMessage__s" kindref="compound">CanExtendedMessage_s</ref><sp/>*received_message);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a2939ee64b45b67008f5769ba9d0f5f16" kindref="member">core_CAN_add_filter</ref>(FDCAN_GlobalTypeDef<sp/>*can,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isExtended,<sp/>uint32_t<sp/>id1,<sp/>uint32_t<sp/>id2);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>STATIC<sp/>FUNCTIONS<sp/>(DECLARED/DEFINED<sp/>IN<sp/>CAN.C)</highlight></codeline>
<codeline lineno="55"><highlight class="comment">static<sp/>bool<sp/>CAN_send_message(FDCAN_GlobalTypeDef<sp/>*can,<sp/>uint32_t<sp/>id,<sp/>uint8_t<sp/>dlc,<sp/>uint64_t<sp/>data);</highlight></codeline>
<codeline lineno="56"><highlight class="comment">static<sp/>void<sp/>rx_handler(FDCAN_GlobalTypeDef<sp/>*can);</highlight></codeline>
<codeline lineno="57"><highlight class="comment">static<sp/>void<sp/>add_CAN_message_to_rx_queue(FDCAN_GlobalTypeDef<sp/>*can,<sp/>uint32_t<sp/>id,<sp/>uint8_t<sp/>dlc,<sp/>uint8_t<sp/>*data);</highlight></codeline>
<codeline lineno="58"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/matthias/racing/core/src/driver/Inc/can.h"/>
  </compounddef>
</doxygen>
