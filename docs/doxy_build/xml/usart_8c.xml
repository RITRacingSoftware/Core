<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="usart_8c" kind="file" language="C++">
    <compoundname>usart.c</compoundname>
    <includes refid="usart_8h" local="yes">usart.h</includes>
    <includes local="yes">core_config.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stm32g4xx_hal.h</includes>
    <includes local="no">stm32g4xx_hal_usart.h</includes>
    <includes refid="clock_8h" local="yes">clock.h</includes>
    <includes refid="gpio_8h" local="yes">gpio.h</includes>
    <incdepgraph>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="9">
        <label>stdarg.h</label>
      </node>
      <node id="1">
        <label>/home/matthias/racing/core/src/driver/Src/usart.c</label>
        <link refid="usart_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="11">
        <label>clock.h</label>
        <link refid="clock_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>gpio.h</label>
        <link refid="gpio_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="7">
        <label>core_config.h</label>
      </node>
      <node id="8">
        <label>stdio.h</label>
      </node>
      <node id="6">
        <label>stm32g4xx_hal_usart.h</label>
      </node>
      <node id="2">
        <label>usart.h</label>
        <link refid="usart_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stm32g4xx_hal.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="usart_8c_1ac44056ed920999ef25103da42746a6ef" prot="public" static="yes" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t core_USART1_rxbuf_int[CORE_USART_RXBUFLEN]</definition>
        <argsstring>[CORE_USART_RXBUFLEN]</argsstring>
        <name>core_USART1_rxbuf_int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="42" column="16" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usart_8c_1ab820bc2a814334af0ed65cc7e179f8c6" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t core_USART1_rxbuflen_int</definition>
        <argsstring></argsstring>
        <name>core_USART1_rxbuflen_int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="43" column="17" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usart_8c_1a4a72b7ab8df795ec6dd08ed22adf0a03" prot="public" static="yes" mutable="no">
        <type>uint8_t *</type>
        <definition>volatile uint8_t* core_USART1_rxbuf</definition>
        <argsstring></argsstring>
        <name>core_USART1_rxbuf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="44" column="25" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usart_8c_1ae063d4e0eaecc89199639d8cd745182f" prot="public" static="yes" mutable="no">
        <type>uint32_t *</type>
        <definition>volatile uint32_t* core_USART1_rxbuflen</definition>
        <argsstring></argsstring>
        <name>core_USART1_rxbuflen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="45" column="26" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usart_8c_1a18905adda8017228ab72cfad4a940bca" prot="public" static="yes" mutable="no">
        <type>void(*</type>
        <definition>void(* core_USART1_callback) (uint8_t *, uint32_t)</definition>
        <argsstring>)(uint8_t *, uint32_t)</argsstring>
        <name>core_USART1_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="46" column="8" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usart_8c_1aea5a1efc79fd5fed59363f232a931a25" prot="public" static="yes" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t core_USART2_rxbuf_int[CORE_USART_RXBUFLEN]</definition>
        <argsstring>[CORE_USART_RXBUFLEN]</argsstring>
        <name>core_USART2_rxbuf_int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="47" column="16" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usart_8c_1ae5308eac01f03bbf411e1ba08a22bb92" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t core_USART2_rxbuflen_int</definition>
        <argsstring></argsstring>
        <name>core_USART2_rxbuflen_int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="48" column="17" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usart_8c_1a9ac4c4de4c8182fad87a29700ba82a0e" prot="public" static="yes" mutable="no">
        <type>uint8_t *</type>
        <definition>volatile uint8_t* core_USART2_rxbuf</definition>
        <argsstring></argsstring>
        <name>core_USART2_rxbuf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="49" column="25" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usart_8c_1a6a662a68cc8d0c630209f14b681debc0" prot="public" static="yes" mutable="no">
        <type>uint32_t *</type>
        <definition>volatile uint32_t* core_USART2_rxbuflen</definition>
        <argsstring></argsstring>
        <name>core_USART2_rxbuflen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="50" column="26" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usart_8c_1ae6c8d1565ddf4b08fa6096e5d24c3d23" prot="public" static="yes" mutable="no">
        <type>void(*</type>
        <definition>void(* core_USART2_callback) (uint8_t *, uint32_t)</definition>
        <argsstring>)(uint8_t *, uint32_t)</argsstring>
        <name>core_USART2_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="51" column="8" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usart_8c_1a4b502a0a368a82bcd0cfef875f3edbe4" prot="public" static="yes" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t core_USART3_rxbuf_int[CORE_USART_RXBUFLEN]</definition>
        <argsstring>[CORE_USART_RXBUFLEN]</argsstring>
        <name>core_USART3_rxbuf_int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="52" column="16" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usart_8c_1ac7f454bb13d1ad52fea2dd96bc21f3e6" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t core_USART3_rxbuflen_int</definition>
        <argsstring></argsstring>
        <name>core_USART3_rxbuflen_int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="53" column="17" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usart_8c_1aaf3dbb4ac0e02cceb9971ab8095b2a8e" prot="public" static="yes" mutable="no">
        <type>uint8_t *</type>
        <definition>volatile uint8_t* core_USART3_rxbuf</definition>
        <argsstring></argsstring>
        <name>core_USART3_rxbuf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="54" column="25" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usart_8c_1aec8bd9b8f8c552a02017cbece1f7e1d0" prot="public" static="yes" mutable="no">
        <type>uint32_t *</type>
        <definition>volatile uint32_t* core_USART3_rxbuflen</definition>
        <argsstring></argsstring>
        <name>core_USART3_rxbuflen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="55" column="26" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usart_8c_1a785cc22837c60b21ce8d38e4d129c2d7" prot="public" static="yes" mutable="no">
        <type>void(*</type>
        <definition>void(* core_USART3_callback) (uint8_t *, uint32_t)</definition>
        <argsstring>)(uint8_t *, uint32_t)</argsstring>
        <name>core_USART3_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="56" column="8" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usart_8c_1a2d4d25ed7ccab8e16a91cbe30458819c" prot="public" static="yes" mutable="no">
        <type>uint8_t</type>
        <definition>volatile uint8_t core_USART_flags</definition>
        <argsstring></argsstring>
        <name>core_USART_flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="58" column="25" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usart_8c_1a6d38a484f8bf50a84dc5cc785ddd6688" prot="public" static="yes" mutable="no">
        <type>USART_HandleTypeDef</type>
        <definition>USART_HandleTypeDef usart1</definition>
        <argsstring></argsstring>
        <name>usart1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="60" column="28" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usart_8c_1a701531bfa389ea09c945b4341bbfead7" prot="public" static="yes" mutable="no">
        <type>USART_HandleTypeDef</type>
        <definition>USART_HandleTypeDef usart2</definition>
        <argsstring></argsstring>
        <name>usart2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="61" column="28" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usart_8c_1ac3be82ebda1d69ef5f2e3c29a51c547f" prot="public" static="yes" mutable="no">
        <type>USART_HandleTypeDef</type>
        <definition>USART_HandleTypeDef usart3</definition>
        <argsstring></argsstring>
        <name>usart3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="62" column="28" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="usart_8c_1a35dc06127bee8b23c08e4ec63aab66d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_USART_init</definition>
        <argsstring>(USART_TypeDef *usart, uint32_t baud)</argsstring>
        <name>core_USART_init</name>
        <param>
          <type>USART_TypeDef *</type>
          <declname>usart</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>baud</declname>
        </param>
        <briefdescription>
<para>Initialize a USART module in asynchronous mode with the given baud rate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>usart</parametername>
</parameternamelist>
<parameterdescription>
<para>The USART module to initialize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baud</parametername>
</parameternamelist>
<parameterdescription>
<para>Baud rate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if the given USART is not valid of if the initialization failed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="76" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="76" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="usart_8c_1a080787d9baeec30dbb2639ab958893bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_USART_start_rx</definition>
        <argsstring>(USART_TypeDef *usart, volatile uint8_t *rxbuf, volatile uint32_t *rxbuflen)</argsstring>
        <name>core_USART_start_rx</name>
        <param>
          <type>USART_TypeDef *</type>
          <declname>usart</declname>
        </param>
        <param>
          <type>volatile uint8_t *</type>
          <declname>rxbuf</declname>
        </param>
        <param>
          <type>volatile uint32_t *</type>
          <declname>rxbuflen</declname>
        </param>
        <briefdescription>
<para>Start the receiver for the given USART module. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>usart</parametername>
</parameternamelist>
<parameterdescription>
<para>The USART module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rxbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Location where received data from the USART should be stored </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rxbuflen</parametername>
</parameternamelist>
<parameterdescription>
<para>Location where the number of received bytes should be stored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if the given USART is not valid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="124" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="124" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="usart_8c_1a98eee6d24e7130a4a1c8527c207843a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_USART_register_callback</definition>
        <argsstring>(USART_TypeDef *usart, void(*callback)(uint8_t *, uint32_t))</argsstring>
        <name>core_USART_register_callback</name>
        <param>
          <type>USART_TypeDef *</type>
          <declname>usart</declname>
        </param>
        <param>
          <type>void(*)(uint8_t *, uint32_t)</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="152" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="152" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="usart_8c_1a27fb9800d727337121da9525aca0b557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART1_IRQHandler</definition>
        <argsstring>()</argsstring>
        <name>USART1_IRQHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="176" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="176" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="usart_8c_1adec38e248f7515f0ee427630d5ff98ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART2_IRQHandler</definition>
        <argsstring>()</argsstring>
        <name>USART2_IRQHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="196" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="196" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="usart_8c_1a7ef0c8dc631c3684df826336b678dda0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART3_IRQHandler</definition>
        <argsstring>()</argsstring>
        <name>USART3_IRQHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="216" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="216" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="usart_8c_1aa6d598f617dc2068c62544b474bc5960" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void core_USART_update_disable</definition>
        <argsstring>(USART_TypeDef *usart)</argsstring>
        <name>core_USART_update_disable</name>
        <param>
          <type>USART_TypeDef *</type>
          <declname>usart</declname>
        </param>
        <briefdescription>
<para>Disable updating the RX buffer for the given USART. Use this before reading from the buffer to which data is stored to prevent corruption. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>usart</parametername>
</parameternamelist>
<parameterdescription>
<para>The USART module </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="242" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="242" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="usart_8c_1a1c56db6aae9393622a2d93a74ec0b1d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void core_USART_update_enable</definition>
        <argsstring>(USART_TypeDef *usart)</argsstring>
        <name>core_USART_update_enable</name>
        <param>
          <type>USART_TypeDef *</type>
          <declname>usart</declname>
        </param>
        <briefdescription>
<para>Enable updating the RX buffer for the given USART. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Receiving is disabled by default. Make sure to call core_USART_update_enable after setting up the receiver with core_USART_start_rx. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>usart</parametername>
</parameternamelist>
<parameterdescription>
<para>The USART module </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="255" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="255" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="usart_8c_1a823dd639b55929d621d419b43450a150" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool core_USART_transmit</definition>
        <argsstring>(USART_TypeDef *usart, uint8_t *txbuf, uint8_t txbuflen)</argsstring>
        <name>core_USART_transmit</name>
        <param>
          <type>USART_TypeDef *</type>
          <declname>usart</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>txbuf</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>txbuflen</declname>
        </param>
        <briefdescription>
<para>Transmit data from a USART. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is blocking and will not return until all data has been transmitted. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>usart</parametername>
</parameternamelist>
<parameterdescription>
<para>The USART module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>txbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Location where the data to be transmitted is read from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>txbuflen</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to transmit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>if transmission was successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/matthias/racing/core/src/driver/Src/usart.c" line="271" column="6" bodyfile="/home/matthias/racing/core/src/driver/Src/usart.c" bodystart="271" bodyend="278"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Core UART library. </para>
    </briefdescription>
    <detaileddescription>
<para>This core library component is used to initialize USARTs, transmit data over USART, and asynchronously receive data over USART.</para>
<sect2 id="usart_8c_1autotoc_md14">
<title>Initialization</title>
<para>To initialize a USART for transmitting, user code must call the function <ref refid="usart_8c_1a35dc06127bee8b23c08e4ec63aab66d3" kindref="member">core_USART_init()</ref> and specify the desired baud rate. To initialize a USART for receiving, user code must call the function <ref refid="usart_8c_1a080787d9baeec30dbb2639ab958893bd" kindref="member">core_USART_start_rx()</ref>.</para>
</sect2>
<sect2 id="usart_8c_1autotoc_md15">
<title>Enabling and disabling</title>
<para>When the USART module is configured for receiving, and it has not received any bytes for a given time, the USART hardware triggers an interrupt, which will copy the data in the internal RX buffer to the buffer passed to <ref refid="usart_8c_1a080787d9baeec30dbb2639ab958893bd" kindref="member">core_USART_start_rx()</ref>. If another function was processing the data in this buffer when the interrupt is triggered, then the data will be corrupted. Thus, the user code must call <ref refid="usart_8c_1aa6d598f617dc2068c62544b474bc5960" kindref="member">core_USART_update_disable()</ref> before processing received data and <ref refid="usart_8c_1a1c56db6aae9393622a2d93a74ec0b1d5" kindref="member">core_USART_update_enable()</ref> when it is done</para>
<para><simplesect kind="note"><para>Any data received while updating is disabled will be lost. </para>
</simplesect>
</para>
</sect2>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;usart.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;core_config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stm32g4xx_hal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stm32g4xx_hal_usart.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;clock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gpio.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;core_config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>core_USART1_rxbuf_int[CORE_USART_RXBUFLEN];</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>core_USART1_rxbuflen_int;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*core_USART1_rxbuf;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*core_USART1_rxbuflen;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>void<sp/>(*core_USART1_callback)(uint8_t<sp/>*,<sp/>uint32_t);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>core_USART2_rxbuf_int[CORE_USART_RXBUFLEN];</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>core_USART2_rxbuflen_int;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*core_USART2_rxbuf;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*core_USART2_rxbuflen;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>void<sp/>(*core_USART2_callback)(uint8_t<sp/>*,<sp/>uint32_t);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>core_USART3_rxbuf_int[CORE_USART_RXBUFLEN];</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>core_USART3_rxbuflen_int;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*core_USART3_rxbuf;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*core_USART3_rxbuflen;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>void<sp/>(*core_USART3_callback)(uint8_t<sp/>*,<sp/>uint32_t);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>core_USART_flags;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>USART_HandleTypeDef<sp/>usart1;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>USART_HandleTypeDef<sp/>usart2;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>USART_HandleTypeDef<sp/>usart3;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CORE_USART_UPRINTF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">uint8_t<sp/>core_USART_usartbuf[CORE_USART_TXBUFLEN];</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="usart_8c_1a35dc06127bee8b23c08e4ec63aab66d3" kindref="member">core_USART_init</ref>(USART_TypeDef<sp/>*usart,<sp/>uint32_t<sp/>baud)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>USART_HandleTypeDef<sp/>*husart;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>GPIO_InitTypeDef<sp/>usartGPIO<sp/>=<sp/>{0,<sp/>GPIO_MODE_AF_PP,<sp/>GPIO_PULLUP,<sp/>GPIO_SPEED_FREQ_LOW,<sp/>7};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usart<sp/>==<sp/>USART1)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usartGPIO.Pin<sp/>=<sp/>CORE_USART1_PINS;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="clock_8c_1a8ac22b37088c49b5f266d0a00dcafb28" kindref="member">core_clock_port_init</ref>(CORE_USART1_PORT);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_GPIO_Init(CORE_USART1_PORT,<sp/>&amp;usartGPIO);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>husart<sp/>=<sp/>&amp;usart1;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usart<sp/>==<sp/>USART2)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usartGPIO.Pin<sp/>=<sp/>CORE_USART2_PINS;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="clock_8c_1a8ac22b37088c49b5f266d0a00dcafb28" kindref="member">core_clock_port_init</ref>(CORE_USART2_PORT);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_GPIO_Init(CORE_USART2_PORT,<sp/>&amp;usartGPIO);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>husart<sp/>=<sp/>&amp;usart2;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usart<sp/>==<sp/>USART3)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usartGPIO.Pin<sp/>=<sp/>CORE_USART3_PINS;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="clock_8c_1a8ac22b37088c49b5f266d0a00dcafb28" kindref="member">core_clock_port_init</ref>(CORE_USART3_PORT);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_GPIO_Init(CORE_USART3_PORT,<sp/>&amp;usartGPIO);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>husart<sp/>=<sp/>&amp;usart3;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="clock_8c_1a4dfc43b43b5975284563a397da6a3d56" kindref="member">core_clock_USART_init</ref>(usart))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>husart-&gt;Instance<sp/>=<sp/>usart;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>husart-&gt;Init.BaudRate<sp/>=<sp/>baud;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>husart-&gt;Init.WordLength<sp/>=<sp/>USART_WORDLENGTH_8B;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>husart-&gt;Init.StopBits<sp/>=<sp/>USART_STOPBITS_1;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>husart-&gt;Init.Parity<sp/>=<sp/>USART_PARITY_NONE;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>husart-&gt;Init.Mode<sp/>=<sp/>USART_MODE_TX_RX;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>husart-&gt;Init.ClockPrescaler<sp/>=<sp/>USART_PRESCALER_DIV4;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>husart-&gt;FifoMode<sp/>=<sp/>USART_FIFOMODE_ENABLE;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>husart-&gt;SlaveMode<sp/>=<sp/>USART_SLAVEMODE_DISABLE;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAL_USART_Init(husart)<sp/>!=<sp/>HAL_OK)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>the<sp/>USART<sp/>in<sp/>asynchronous<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>usart-&gt;CR1<sp/>&amp;=<sp/>~USART_CR1_UE;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>usart-&gt;CR2<sp/>&amp;=<sp/>~USART_CR2_CLKEN;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>usart-&gt;CR1<sp/>|=<sp/>USART_CR1_UE;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="usart_8c_1a080787d9baeec30dbb2639ab958893bd" kindref="member">core_USART_start_rx</ref>(USART_TypeDef<sp/>*usart,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*rxbuf,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*rxbuflen)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usart<sp/>==<sp/>USART1)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_USART1_rxbuf<sp/>=<sp/>rxbuf;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_USART1_rxbuflen<sp/>=<sp/>rxbuflen;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_SetPriority(USART1_IRQn,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_EnableIRQ(USART1_IRQn);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__HAL_USART_ENABLE_IT(&amp;usart1,<sp/>USART_IT_RXNE);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usart<sp/>==<sp/>USART2)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_USART2_rxbuf<sp/>=<sp/>rxbuf;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_USART2_rxbuflen<sp/>=<sp/>rxbuflen;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_SetPriority(USART2_IRQn,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_EnableIRQ(USART2_IRQn);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__HAL_USART_ENABLE_IT(&amp;usart2,<sp/>USART_IT_RXNE);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usart<sp/>==<sp/>USART3)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_USART3_rxbuf<sp/>=<sp/>rxbuf;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_USART3_rxbuflen<sp/>=<sp/>rxbuflen;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_SetPriority(USART3_IRQn,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_EnableIRQ(USART3_IRQn);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__HAL_USART_ENABLE_IT(&amp;usart3,<sp/>USART_IT_RXNE);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>the<sp/>receiver<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>usart-&gt;RTOR<sp/>=<sp/>(usart-&gt;RTOR<sp/>&amp;<sp/>0xff000000)<sp/>|<sp/>CORE_USART_RX_TIMEOUT;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>usart-&gt;CR1<sp/>|=<sp/>USART_CR1_RTOIE;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>usart-&gt;CR2<sp/>|=<sp/>USART_CR2_RTOEN;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="usart_8c_1a1c56db6aae9393622a2d93a74ec0b1d5" kindref="member">core_USART_update_enable</ref>(usart);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>core_USART_register_callback(USART_TypeDef<sp/>*usart,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*callback)(uint8_t<sp/>*,<sp/>uint32_t))<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usart<sp/>==<sp/>USART1)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_USART1_callback<sp/>=<sp/>callback;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_SetPriority(USART1_IRQn,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_EnableIRQ(USART1_IRQn);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__HAL_USART_ENABLE_IT(&amp;usart1,<sp/>USART_IT_RXNE);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usart<sp/>==<sp/>USART2)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_USART2_callback<sp/>=<sp/>callback;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_SetPriority(USART2_IRQn,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_EnableIRQ(USART2_IRQn);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__HAL_USART_ENABLE_IT(&amp;usart2,<sp/>USART_IT_RXNE);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usart<sp/>==<sp/>USART3)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_USART3_callback<sp/>=<sp/>callback;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_SetPriority(USART3_IRQn,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_EnableIRQ(USART3_IRQn);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__HAL_USART_ENABLE_IT(&amp;usart3,<sp/>USART_IT_RXNE);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>the<sp/>receiver<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>usart-&gt;RTOR<sp/>=<sp/>(usart-&gt;RTOR<sp/>&amp;<sp/>0xff000000)<sp/>|<sp/>CORE_USART_RX_TIMEOUT;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>usart-&gt;CR1<sp/>|=<sp/>USART_CR1_RTOIE;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>usart-&gt;CR2<sp/>|=<sp/>USART_CR2_RTOEN;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>USART1_IRQHandler()<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>flags<sp/>=<sp/>USART1-&gt;ISR;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>USART_ISR_RXNE)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Receive<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_USART1_rxbuf_int[core_USART1_rxbuflen_int++]<sp/>=<sp/>USART1-&gt;RDR;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>USART_ISR_RTOF)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Timed<sp/>out<sp/>(end<sp/>of<sp/>transmission)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(core_USART1_rxbuf<sp/>&amp;&amp;<sp/>core_USART1_rxbuflen<sp/>&amp;&amp;<sp/>(core_USART_flags<sp/>&amp;<sp/>CORE_USART1_UPDATE))<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>core_USART1_rxbuflen_int;<sp/>i++)<sp/>core_USART1_rxbuf[i]<sp/>=<sp/>core_USART1_rxbuf_int[i];</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*core_USART1_rxbuflen<sp/>=<sp/>core_USART1_rxbuflen_int;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(core_USART1_callback)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_USART1_callback(core_USART1_rxbuf_int,<sp/>core_USART1_rxbuflen_int);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_USART1_rxbuflen_int<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USART1-&gt;ICR<sp/>=<sp/>USART_ICR_RTOCF;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>USART2_IRQHandler()<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>flags<sp/>=<sp/>USART2-&gt;ISR;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>USART_ISR_RXNE)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Receive<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_USART2_rxbuf_int[core_USART2_rxbuflen_int++]<sp/>=<sp/>USART2-&gt;RDR;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>USART_ISR_RTOF)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Timed<sp/>out<sp/>(end<sp/>of<sp/>transmission)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(core_USART2_rxbuf<sp/>&amp;&amp;<sp/>core_USART2_rxbuflen<sp/>&amp;&amp;<sp/>(core_USART_flags<sp/>&amp;<sp/>CORE_USART2_UPDATE))<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>core_USART2_rxbuflen_int;<sp/>i++)<sp/>core_USART2_rxbuf[i]<sp/>=<sp/>core_USART2_rxbuf_int[i];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*core_USART2_rxbuflen<sp/>=<sp/>core_USART2_rxbuflen_int;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(core_USART2_callback)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_USART2_callback(core_USART2_rxbuf_int,<sp/>core_USART2_rxbuflen_int);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_USART2_rxbuflen_int<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USART2-&gt;ICR<sp/>=<sp/>USART_ICR_RTOCF;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>USART3_IRQHandler()<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>flags<sp/>=<sp/>USART3-&gt;ISR;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>USART_ISR_RXNE)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Receive<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_USART3_rxbuf_int[core_USART3_rxbuflen_int++]<sp/>=<sp/>USART3-&gt;RDR;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>USART_ISR_RTOF)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Timed<sp/>out<sp/>(end<sp/>of<sp/>transmission)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(core_USART3_rxbuf<sp/>&amp;&amp;<sp/>core_USART3_rxbuflen<sp/>&amp;&amp;<sp/>(core_USART_flags<sp/>&amp;<sp/>CORE_USART3_UPDATE))<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>core_USART3_rxbuflen_int;<sp/>i++)<sp/>core_USART3_rxbuf[i]<sp/>=<sp/>core_USART3_rxbuf_int[i];</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*core_USART3_rxbuflen<sp/>=<sp/>core_USART3_rxbuflen_int;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(core_USART3_callback)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_USART3_callback(core_USART3_rxbuf_int,<sp/>core_USART3_rxbuflen_int);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>core_USART3_rxbuflen_int<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USART3-&gt;ICR<sp/>=<sp/>USART_ICR_RTOCF;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usart_8c_1aa6d598f617dc2068c62544b474bc5960" kindref="member">core_USART_update_disable</ref>(USART_TypeDef<sp/>*usart)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usart<sp/>==<sp/>USART1)<sp/>core_USART_flags<sp/>&amp;=<sp/>~CORE_USART1_UPDATE;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usart<sp/>==<sp/>USART2)<sp/>core_USART_flags<sp/>&amp;=<sp/>~CORE_USART2_UPDATE;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usart<sp/>==<sp/>USART3)<sp/>core_USART_flags<sp/>&amp;=<sp/>~CORE_USART3_UPDATE;</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="usart_8c_1a1c56db6aae9393622a2d93a74ec0b1d5" kindref="member">core_USART_update_enable</ref>(USART_TypeDef<sp/>*usart)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usart<sp/>==<sp/>USART1)<sp/>core_USART_flags<sp/>|=<sp/>CORE_USART1_UPDATE;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usart<sp/>==<sp/>USART2)<sp/>core_USART_flags<sp/>|=<sp/>CORE_USART2_UPDATE;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usart<sp/>==<sp/>USART3)<sp/>core_USART_flags<sp/>|=<sp/>CORE_USART3_UPDATE;</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="usart_8c_1a823dd639b55929d621d419b43450a150" kindref="member">core_USART_transmit</ref>(USART_TypeDef<sp/>*usart,<sp/>uint8_t<sp/>*txbuf,<sp/>uint8_t<sp/>txbuflen)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>USART_HandleTypeDef<sp/>*husart;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usart<sp/>==<sp/>USART1)<sp/>husart<sp/>=<sp/>&amp;usart1;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usart<sp/>==<sp/>USART2)<sp/>husart<sp/>=<sp/>&amp;usart2;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usart<sp/>==<sp/>USART3)<sp/>husart<sp/>=<sp/>&amp;usart3;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HAL_USART_Transmit(husart,<sp/>txbuf,<sp/>txbuflen,<sp/>0xffffffff)<sp/>==<sp/>HAL_OK;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CORE_USART_UPRINTF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uprintf(USART_TypeDef<sp/>*usart,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,<sp/>format);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>vsprintf(core_USART_usartbuf,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="usart_8c_1a823dd639b55929d621d419b43450a150" kindref="member">core_USART_transmit</ref>(usart,<sp/>core_USART_usartbuf,<sp/>n))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/matthias/racing/core/src/driver/Src/usart.c"/>
  </compounddef>
</doxygen>
